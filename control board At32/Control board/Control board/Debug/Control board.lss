
Control board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001a78  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008000f4  008000f4  00001ba0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000319c  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e38  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001774  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00007608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a14  00000000  00000000  00007bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000168f  00000000  00000000  000085e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00009c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 00 	call	0x126	; 0x126 <main>
      8a:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_Interrupt>:
	}
}

void Timer0_Interrupt()
{
	if(strcmp(uart_rec , "SwitchMode") == 0)
      92:	64 e6       	ldi	r22, 0x64	; 100
      94:	70 e0       	ldi	r23, 0x00	; 0
      96:	8f e0       	ldi	r24, 0x0F	; 15
      98:	91 e0       	ldi	r25, 0x01	; 1
      9a:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
      9e:	89 2b       	or	r24, r25
      a0:	69 f4       	brne	.+26     	; 0xbc <Timer0_Interrupt+0x2a>
	{
		 TogBit(Mode, 0);
      a2:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <__data_end>
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	89 27       	eor	r24, r25
      aa:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
		 memset(uart_rec, 0, 16);
      ae:	80 e1       	ldi	r24, 0x10	; 16
      b0:	ef e0       	ldi	r30, 0x0F	; 15
      b2:	f1 e0       	ldi	r31, 0x01	; 1
      b4:	df 01       	movw	r26, r30
      b6:	1d 92       	st	X+, r1
      b8:	8a 95       	dec	r24
      ba:	e9 f7       	brne	.-6      	; 0xb6 <Timer0_Interrupt+0x24>
      bc:	08 95       	ret

000000be <Uart_Interrupt>:

void Uart_Interrupt()
{
	

	memset(uart_rec, 0, 16);
      be:	80 e1       	ldi	r24, 0x10	; 16
      c0:	ef e0       	ldi	r30, 0x0F	; 15
      c2:	f1 e0       	ldi	r31, 0x01	; 1
      c4:	df 01       	movw	r26, r30
      c6:	1d 92       	st	X+, r1
      c8:	8a 95       	dec	r24
      ca:	e9 f7       	brne	.-6      	; 0xc6 <Uart_Interrupt+0x8>

	if(Local_u8_Cnt < 15 )
      cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Local_u8_Cnt>
      d0:	8f 30       	cpi	r24, 0x0F	; 15
      d2:	40 f5       	brcc	.+80     	; 0x124 <Uart_Interrupt+0x66>
	{
		u8 c ;
		c = _UDR;
      d4:	8c b1       	in	r24, 0x0c	; 12
		if ( c == '\0' || c == '\n' ||c == '\r')
      d6:	88 23       	and	r24, r24
      d8:	21 f0       	breq	.+8      	; 0xe2 <Uart_Interrupt+0x24>
      da:	8a 30       	cpi	r24, 0x0A	; 10
      dc:	11 f0       	breq	.+4      	; 0xe2 <Uart_Interrupt+0x24>
      de:	8d 30       	cpi	r24, 0x0D	; 13
      e0:	b1 f4       	brne	.+44     	; 0x10e <Uart_Interrupt+0x50>
		{
			
			rec[Local_u8_Cnt] = '\0';
      e2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <Local_u8_Cnt>
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	e6 50       	subi	r30, 0x06	; 6
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	10 82       	st	Z, r1
			Local_u8_Cnt = 0;
      ee:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Local_u8_Cnt>
			
			strcat(uart_rec, rec);
      f2:	6a ef       	ldi	r22, 0xFA	; 250
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	8f e0       	ldi	r24, 0x0F	; 15
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
			memset(rec, 0, 16);
      fe:	80 e1       	ldi	r24, 0x10	; 16
     100:	ea ef       	ldi	r30, 0xFA	; 250
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	df 01       	movw	r26, r30
     106:	1d 92       	st	X+, r1
     108:	8a 95       	dec	r24
     10a:	e9 f7       	brne	.-6      	; 0x106 <Uart_Interrupt+0x48>
			return;
     10c:	08 95       	ret
			
		}
		rec[Local_u8_Cnt] = c;
     10e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <Local_u8_Cnt>
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	e6 50       	subi	r30, 0x06	; 6
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	80 83       	st	Z, r24
		Local_u8_Cnt++;
     11a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Local_u8_Cnt>
     11e:	8f 5f       	subi	r24, 0xFF	; 255
     120:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Local_u8_Cnt>
     124:	08 95       	ret

00000126 <main>:

int main(void){
	
	
	//M_Dio_PinMode(_PB4, OUTPUT);
	M_Timer0_Init();
     126:	0e 94 15 07 	call	0xe2a	; 0xe2a <M_Timer0_Init>
	M_Timer0_SetCallBack(Timer0_Interrupt);
     12a:	89 e4       	ldi	r24, 0x49	; 73
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 20 07 	call	0xe40	; 0xe40 <M_Timer0_SetCallBack>
	M_Uart_Init();
     132:	0e 94 76 07 	call	0xeec	; 0xeec <M_Uart_Init>
	M_Uart_SetCallBack(Uart_Interrupt);
     136:	8f e5       	ldi	r24, 0x5F	; 95
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_Uart_SetCallBack>
	M_Dio_PinMode(_PD2, OUTPUT);
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	8a e2       	ldi	r24, 0x2A	; 42
     142:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinWrite(_PD2, HIGH);
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	8a e2       	ldi	r24, 0x2A	; 42
     14a:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	sei();
     14e:	78 94       	sei
	H_Sero_Init();
     150:	0e 94 85 05 	call	0xb0a	; 0xb0a <H_Sero_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     154:	2f ef       	ldi	r18, 0xFF	; 255
     156:	83 ed       	ldi	r24, 0xD3	; 211
     158:	90 e3       	ldi	r25, 0x30	; 48
     15a:	21 50       	subi	r18, 0x01	; 1
     15c:	80 40       	sbci	r24, 0x00	; 0
     15e:	90 40       	sbci	r25, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <main+0x34>
     162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x3e>
     164:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Init();
     166:	0e 94 06 04 	call	0x80c	; 0x80c <H_Lcd_Init>
	H_Lcd_WriteString("Hi :)");
     16a:	8f e6       	ldi	r24, 0x6F	; 111
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
     172:	af ef       	ldi	r26, 0xFF	; 255
     174:	b3 ed       	ldi	r27, 0xD3	; 211
     176:	20 e3       	ldi	r18, 0x30	; 48
     178:	a1 50       	subi	r26, 0x01	; 1
     17a:	b0 40       	sbci	r27, 0x00	; 0
     17c:	20 40       	sbci	r18, 0x00	; 0
     17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x52>
     180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x5c>
     182:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Clr();
     184:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
	H_Motor_Init();
     188:	0e 94 12 03 	call	0x624	; 0x624 <H_Motor_Init>
	H_Servo_SetAngle(ARM_BICEPC, X_Default);
     18c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <X_Default>
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
	H_Servo_SetAngle(ARM_RST, Y_Default);
     196:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <Y_Default>
     19a:	87 e0       	ldi	r24, 0x07	; 7
     19c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
	H_Servo_SetAngle(ARM_HAND, Z_Default);
     1a0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
     1aa:	c4 e1       	ldi	r28, 0x14	; 20
	//H_Servo_SetAngle(ARM_BASE, 0);
	for (int i = 20; i<70; i++)
	{
		H_Servo_SetAngle(ARM_CLAPP, i);
     1ac:	6c 2f       	mov	r22, r28
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
     1b4:	8f e3       	ldi	r24, 0x3F	; 63
     1b6:	9c e9       	ldi	r25, 0x9C	; 156
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x92>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x98>
     1be:	00 00       	nop
     1c0:	cf 5f       	subi	r28, 0xFF	; 255
	H_Motor_Init();
	H_Servo_SetAngle(ARM_BICEPC, X_Default);
	H_Servo_SetAngle(ARM_RST, Y_Default);
	H_Servo_SetAngle(ARM_HAND, Z_Default);
	//H_Servo_SetAngle(ARM_BASE, 0);
	for (int i = 20; i<70; i++)
     1c2:	c6 34       	cpi	r28, 0x46	; 70
     1c4:	99 f7       	brne	.-26     	; 0x1ac <main+0x86>
	{
		H_Servo_SetAngle(ARM_CLAPP, i);
		_delay_ms(10);
	}
	H_Servo_SetAngle(ARM_CLAPP, 20);
     1c6:	64 e1       	ldi	r22, 0x14	; 20
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
	/*M_Uart_SendString("fsdfsd"); */
	//PCA9685_soft_reset();
	BaseCnt = 0;
     1ce:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <BaseCnt+0x1>
     1d2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <BaseCnt>
	clappCnt = 10;
     1d6:	8a e0       	ldi	r24, 0x0A	; 10
     1d8:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <clappCnt>
					for (u8 i = clappCnt; i<=90; i++,++clappCnt)
					{
						
						if(clappCnt > 90 )
						{
							clappCnt = 90;
     1dc:	da e5       	ldi	r29, 0x5A	; 90
     1de:	66 c1       	rjmp	.+716    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			//M_Uart_ReceiveString(uart_rec, 16);
// 			H_Lcd_GoTo(0,0);
// 			H_Lcd_WriteString(uart_rec);
			//H_Lcd_WriteString("BICEPS RST HAND");
			H_Servo_SetAngle(ARM_BICEPC, xangle);
     1e0:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <xangle>
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
			H_Servo_SetAngle(ARM_RST, yangle);
     1ea:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <yangle>
     1ee:	87 e0       	ldi	r24, 0x07	; 7
     1f0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
			H_Servo_SetAngle(ARM_HAND, zangle);
     1f4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <zangle>
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
// 			M_Uart_Transmit(xangle);
// 			M_Uart_Transmit(yangle);
// 			M_Uart_Transmit(zangle);
			
			H_Lcd_GoTo(0,0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
			H_Lcd_WriteString("BICEPS RST HAND");
     206:	85 e7       	ldi	r24, 0x75	; 117
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
			H_Lcd_WriteNumber(xangle);
     216:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <xangle>
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 c6 08 	call	0x118c	; 0x118c <__floatunsisf>
     224:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
			H_Lcd_GoTo(1,7);
     228:	67 e0       	ldi	r22, 0x07	; 7
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
			H_Lcd_WriteNumber(yangle);
     230:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <yangle>
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 c6 08 	call	0x118c	; 0x118c <__floatunsisf>
     23e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
			H_Lcd_GoTo(1,11);
     242:	6b e0       	ldi	r22, 0x0B	; 11
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
			H_Lcd_WriteNumber(zangle);
     24a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <zangle>
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 c6 08 	call	0x118c	; 0x118c <__floatunsisf>
     258:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
     25c:	9f ef       	ldi	r25, 0xFF	; 255
     25e:	a1 ee       	ldi	r26, 0xE1	; 225
     260:	b4 e0       	ldi	r27, 0x04	; 4
     262:	91 50       	subi	r25, 0x01	; 1
     264:	a0 40       	sbci	r26, 0x00	; 0
     266:	b0 40       	sbci	r27, 0x00	; 0
     268:	e1 f7       	brne	.-8      	; 0x262 <main+0x13c>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x146>
     26c:	00 00       	nop
			_delay_ms(100);
			/*if(GetBit(flag, 0) == 0){*/
				if(uart_rec[0] == 'X')
     26e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart_rec>
     272:	88 35       	cpi	r24, 0x58	; 88
     274:	f1 f4       	brne	.+60     	; 0x2b2 <main+0x18c>
				{
					strncpy(Buff, uart_rec+1, strlen(uart_rec)-1);
     276:	ef e0       	ldi	r30, 0x0F	; 15
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	01 90       	ld	r0, Z+
     27c:	00 20       	and	r0, r0
     27e:	e9 f7       	brne	.-6      	; 0x27a <main+0x154>
     280:	af 01       	movw	r20, r30
     282:	41 51       	subi	r20, 0x11	; 17
     284:	51 40       	sbci	r21, 0x01	; 1
     286:	60 e1       	ldi	r22, 0x10	; 16
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	80 e2       	ldi	r24, 0x20	; 32
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 39 0a 	call	0x1472	; 0x1472 <strncpy>
					xangle = atoi(Buff);
     292:	80 e2       	ldi	r24, 0x20	; 32
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 07 0a 	call	0x140e	; 0x140e <atoi>
     29a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xangle>
					H_Lcd_Clr();
     29e:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
					memset(Buff,0,4);
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	e0 e2       	ldi	r30, 0x20	; 32
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	df 01       	movw	r26, r30
     2aa:	1d 92       	st	X+, r1
     2ac:	8a 95       	dec	r24
     2ae:	e9 f7       	brne	.-6      	; 0x2aa <main+0x184>
     2b0:	40 c0       	rjmp	.+128    	; 0x332 <main+0x20c>
				}
			
				else if(uart_rec[0] == 'Y')
     2b2:	89 35       	cpi	r24, 0x59	; 89
     2b4:	f1 f4       	brne	.+60     	; 0x2f2 <main+0x1cc>
				{
					strncpy(Buff, uart_rec+1, strlen(uart_rec)-1);
     2b6:	ef e0       	ldi	r30, 0x0F	; 15
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	01 90       	ld	r0, Z+
     2bc:	00 20       	and	r0, r0
     2be:	e9 f7       	brne	.-6      	; 0x2ba <main+0x194>
     2c0:	af 01       	movw	r20, r30
     2c2:	41 51       	subi	r20, 0x11	; 17
     2c4:	51 40       	sbci	r21, 0x01	; 1
     2c6:	60 e1       	ldi	r22, 0x10	; 16
     2c8:	71 e0       	ldi	r23, 0x01	; 1
     2ca:	80 e2       	ldi	r24, 0x20	; 32
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 39 0a 	call	0x1472	; 0x1472 <strncpy>
					yangle = atoi(Buff);
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 07 0a 	call	0x140e	; 0x140e <atoi>
     2da:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <yangle>
					memset(Buff,0,4);H_Lcd_Clr();
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	e0 e2       	ldi	r30, 0x20	; 32
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	df 01       	movw	r26, r30
     2e6:	1d 92       	st	X+, r1
     2e8:	8a 95       	dec	r24
     2ea:	e9 f7       	brne	.-6      	; 0x2e6 <main+0x1c0>
     2ec:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
     2f0:	20 c0       	rjmp	.+64     	; 0x332 <main+0x20c>
				}
			
				else if(uart_rec[0] == 'Z')
     2f2:	8a 35       	cpi	r24, 0x5A	; 90
     2f4:	f1 f4       	brne	.+60     	; 0x332 <main+0x20c>
				{
					strncpy(Buff, uart_rec+1, strlen(uart_rec));
     2f6:	ef e0       	ldi	r30, 0x0F	; 15
     2f8:	f1 e0       	ldi	r31, 0x01	; 1
     2fa:	01 90       	ld	r0, Z+
     2fc:	00 20       	and	r0, r0
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <main+0x1d4>
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	af 01       	movw	r20, r30
     304:	4f 50       	subi	r20, 0x0F	; 15
     306:	51 40       	sbci	r21, 0x01	; 1
     308:	60 e1       	ldi	r22, 0x10	; 16
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 39 0a 	call	0x1472	; 0x1472 <strncpy>
					zangle = atoi(Buff);
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 07 0a 	call	0x140e	; 0x140e <atoi>
     31c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <zangle>
					memset(Buff,0,4);H_Lcd_Clr();
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f1 e0       	ldi	r31, 0x01	; 1
     326:	df 01       	movw	r26, r30
     328:	1d 92       	st	X+, r1
     32a:	8a 95       	dec	r24
     32c:	e9 f7       	brne	.-6      	; 0x328 <main+0x202>
     32e:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
				}
			//}
							
				if(strcmp(uart_rec, "Clapp+") == 0)
     332:	65 e8       	ldi	r22, 0x85	; 133
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	8f e0       	ldi	r24, 0x0F	; 15
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     33e:	89 2b       	or	r24, r25
     340:	51 f5       	brne	.+84     	; 0x396 <main+0x270>
				{
					
					for (u8 i = clappCnt; i<=90; i++,++clappCnt)
     342:	c0 91 f7 00 	lds	r28, 0x00F7	; 0x8000f7 <clappCnt>
     346:	cb 35       	cpi	r28, 0x5B	; 91
     348:	30 f0       	brcs	.+12     	; 0x356 <main+0x230>
     34a:	1f c0       	rjmp	.+62     	; 0x38a <main+0x264>
					{
						
						if(clappCnt > 90 )
     34c:	8b 35       	cpi	r24, 0x5B	; 91
     34e:	18 f0       	brcs	.+6      	; 0x356 <main+0x230>
						{
							clappCnt = 90;
     350:	d0 93 f7 00 	sts	0x00F7, r29	; 0x8000f7 <clappCnt>
							break;
     354:	1a c0       	rjmp	.+52     	; 0x38a <main+0x264>
						}
						if(strcmp(uart_rec, "Stop") == 0)break;
     356:	6c e8       	ldi	r22, 0x8C	; 140
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	8f e0       	ldi	r24, 0x0F	; 15
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     362:	89 2b       	or	r24, r25
     364:	91 f0       	breq	.+36     	; 0x38a <main+0x264>
						H_Servo_SetAngle(ARM_CLAPP, i);
     366:	6c 2f       	mov	r22, r28
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9c e9       	ldi	r25, 0x9C	; 156
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <main+0x24c>
     376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x252>
     378:	00 00       	nop
			//}
							
				if(strcmp(uart_rec, "Clapp+") == 0)
				{
					
					for (u8 i = clappCnt; i<=90; i++,++clappCnt)
     37a:	cf 5f       	subi	r28, 0xFF	; 255
     37c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <clappCnt>
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <clappCnt>
     386:	cb 35       	cpi	r28, 0x5B	; 91
     388:	09 f7       	brne	.-62     	; 0x34c <main+0x226>
						if(strcmp(uart_rec, "Stop") == 0)break;
						H_Servo_SetAngle(ARM_CLAPP, i);
						_delay_ms(10);
						
					}
					strcat(uart_rec, rec);
     38a:	6a ef       	ldi	r22, 0xFA	; 250
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	8f e0       	ldi	r24, 0x0F	; 15
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
				}
				
				if(strcmp(uart_rec, "Clapp-") == 0)
     396:	61 e9       	ldi	r22, 0x91	; 145
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     3a2:	89 2b       	or	r24, r25
     3a4:	51 f5       	brne	.+84     	; 0x3fa <main+0x2d4>
				{
					
					for (u8 i = clappCnt; i>=0 ; --i,--clappCnt)
     3a6:	c0 91 f7 00 	lds	r28, 0x00F7	; 0x8000f7 <clappCnt>
					{
						if(clappCnt == 0 )
     3aa:	c1 11       	cpse	r28, r1
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <main+0x292>
						{
							//clappCnt = 0;
							H_Servo_SetAngle(ARM_CLAPP, 0);
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
							break;
     3b6:	1b c0       	rjmp	.+54     	; 0x3ee <main+0x2c8>
						}
						if(strcmp(uart_rec, "Stop") == 0)break;
     3b8:	6c e8       	ldi	r22, 0x8C	; 140
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	8f e0       	ldi	r24, 0x0F	; 15
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     3c4:	89 2b       	or	r24, r25
     3c6:	99 f0       	breq	.+38     	; 0x3ee <main+0x2c8>
						H_Servo_SetAngle(ARM_CLAPP, i);
     3c8:	6c 2f       	mov	r22, r28
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
     3d0:	af e3       	ldi	r26, 0x3F	; 63
     3d2:	bc e9       	ldi	r27, 0x9C	; 156
     3d4:	11 97       	sbiw	r26, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x2ae>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x2b4>
     3da:	00 00       	nop
				}
				
				if(strcmp(uart_rec, "Clapp-") == 0)
				{
					
					for (u8 i = clappCnt; i>=0 ; --i,--clappCnt)
     3dc:	c1 50       	subi	r28, 0x01	; 1
     3de:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <clappCnt>
     3e2:	81 50       	subi	r24, 0x01	; 1
     3e4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <clappCnt>
					{
						if(clappCnt == 0 )
     3e8:	81 11       	cpse	r24, r1
     3ea:	e6 cf       	rjmp	.-52     	; 0x3b8 <main+0x292>
     3ec:	e0 cf       	rjmp	.-64     	; 0x3ae <main+0x288>
						if(strcmp(uart_rec, "Stop") == 0)break;
						H_Servo_SetAngle(ARM_CLAPP, i);
						_delay_ms(10);
						
					}
					strcat(uart_rec, rec);
     3ee:	6a ef       	ldi	r22, 0xFA	; 250
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
					
				}
				
				if(strcmp(uart_rec, "Base+") == 0)
     3fa:	68 e9       	ldi	r22, 0x98	; 152
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     406:	89 2b       	or	r24, r25
     408:	a9 f4       	brne	.+42     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				{
					H_Servo_360(CLOCKWISE);
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <H_Servo_360>
     410:	bf ef       	ldi	r27, 0xFF	; 255
     412:	21 ee       	ldi	r18, 0xE1	; 225
     414:	84 e0       	ldi	r24, 0x04	; 4
     416:	b1 50       	subi	r27, 0x01	; 1
     418:	20 40       	sbci	r18, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     420:	00 00       	nop
					_delay_ms(100);
					H_Servo_360(STOP);
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <H_Servo_360>
					strcat(uart_rec, rec);
     428:	6a ef       	ldi	r22, 0xFA	; 250
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	8f e0       	ldi	r24, 0x0F	; 15
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
				}
				
				if(strcmp(uart_rec, "Base-") == 0)
     434:	6e e9       	ldi	r22, 0x9E	; 158
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	8f e0       	ldi	r24, 0x0F	; 15
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     440:	89 2b       	or	r24, r25
     442:	a9 f4       	brne	.+42     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				{
					H_Servo_360(ANTICLOCKWISE);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <H_Servo_360>
     44a:	9f ef       	ldi	r25, 0xFF	; 255
     44c:	a1 ee       	ldi	r26, 0xE1	; 225
     44e:	b4 e0       	ldi	r27, 0x04	; 4
     450:	91 50       	subi	r25, 0x01	; 1
     452:	a0 40       	sbci	r26, 0x00	; 0
     454:	b0 40       	sbci	r27, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     45a:	00 00       	nop
					_delay_ms(100);
					H_Servo_360(STOP);
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <H_Servo_360>
					strcat(uart_rec, rec);
     462:	6a ef       	ldi	r22, 0xFA	; 250
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	8f e0       	ldi	r24, 0x0F	; 15
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
				}
				
				
				if(strcmp(uart_rec, "Reset") == 0)
     46e:	64 ea       	ldi	r22, 0xA4	; 164
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	8f e0       	ldi	r24, 0x0F	; 15
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     47a:	89 2b       	or	r24, r25
     47c:	b9 f4       	brne	.+46     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
				{
					H_Servo_SetAngle(ARM_BICEPC, X_Default);
     47e:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <X_Default>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
					H_Servo_SetAngle(ARM_HAND, Z_Default);
     488:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
					H_Servo_SetAngle(ARM_RST, Y_Default);
     492:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <Y_Default>
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Servo_SetAngle>
					H_Lcd_Clr();
     49c:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
					strcat(uart_rec, rec);
     4a0:	6a ef       	ldi	r22, 0xFA	; 250
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	8f e0       	ldi	r24, 0x0F	; 15
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 25 0a 	call	0x144a	; 0x144a <strcat>
	clappCnt = 10;
	
	while(1)
	{	
		//H_Lcd_WriteString("56456456");	
		while(Mode == 0) // Normal Mode (Arm Control)
     4ac:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     4b0:	88 23       	and	r24, r24
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b4:	95 ce       	rjmp	.-726    	; 0x1e0 <main+0xba>
				
				
			
		}
		
		H_Lcd_Clr();
     4b6:	0e 94 15 05 	call	0xa2a	; 0xa2a <H_Lcd_Clr>
		while(Mode == 1)
     4ba:	ae c0       	rjmp	.+348    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
		{
			H_Lcd_GoTo(0,0);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
			H_Lcd_WriteString("Motor Mode");
     4c4:	8a ea       	ldi	r24, 0xAA	; 170
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
			if(strcmp(uart_rec, "Stop") == 0)  H_Motor_Stop();
     4cc:	6c e8       	ldi	r22, 0x8C	; 140
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	8f e0       	ldi	r24, 0x0F	; 15
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     4d8:	89 2b       	or	r24, r25
     4da:	19 f4       	brne	.+6      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4dc:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_Motor_Stop>
     4e0:	9b c0       	rjmp	.+310    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
			else if(strcmp(uart_rec, "Forward") == 0) 
     4e2:	65 eb       	ldi	r22, 0xB5	; 181
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     4ee:	89 2b       	or	r24, r25
     4f0:	f9 f4       	brne	.+62     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
			{
				H_Lcd_GoTo(1,0);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
				H_Lcd_WriteString("FWD");
     4fa:	8d eb       	ldi	r24, 0xBD	; 189
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
				H_Motor_Forward();
     502:	0e 94 33 03 	call	0x666	; 0x666 <H_Motor_Forward>
     506:	2f ef       	ldi	r18, 0xFF	; 255
     508:	83 ed       	ldi	r24, 0xD3	; 211
     50a:	90 e3       	ldi	r25, 0x30	; 48
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	80 40       	sbci	r24, 0x00	; 0
     510:	90 40       	sbci	r25, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     514:	00 c0       	rjmp	.+0      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     516:	00 00       	nop
				_delay_ms(1000);
				H_Motor_Stop();_delay_ms(1000);
     518:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_Motor_Stop>
     51c:	af ef       	ldi	r26, 0xFF	; 255
     51e:	b3 ed       	ldi	r27, 0xD3	; 211
     520:	20 e3       	ldi	r18, 0x30	; 48
     522:	a1 50       	subi	r26, 0x01	; 1
     524:	b0 40       	sbci	r27, 0x00	; 0
     526:	20 40       	sbci	r18, 0x00	; 0
     528:	e1 f7       	brne	.-8      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
     52c:	00 00       	nop
     52e:	74 c0       	rjmp	.+232    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
				
			}
			else if(strcmp(uart_rec, "Backward") == 0)
     530:	61 ec       	ldi	r22, 0xC1	; 193
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	8f e0       	ldi	r24, 0x0F	; 15
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     53c:	89 2b       	or	r24, r25
     53e:	f9 f4       	brne	.+62     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
			{
				H_Lcd_GoTo(1,0);
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
				H_Lcd_WriteString("BWD");
     548:	8a ec       	ldi	r24, 0xCA	; 202
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
				 H_Motor_Backward();
     550:	0e 94 44 03 	call	0x688	; 0x688 <H_Motor_Backward>
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	93 ed       	ldi	r25, 0xD3	; 211
     558:	a0 e3       	ldi	r26, 0x30	; 48
     55a:	81 50       	subi	r24, 0x01	; 1
     55c:	90 40       	sbci	r25, 0x00	; 0
     55e:	a0 40       	sbci	r26, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     562:	00 c0       	rjmp	.+0      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     564:	00 00       	nop
				_delay_ms(1000);
				H_Motor_Stop();_delay_ms(1000);
     566:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_Motor_Stop>
     56a:	bf ef       	ldi	r27, 0xFF	; 255
     56c:	23 ed       	ldi	r18, 0xD3	; 211
     56e:	80 e3       	ldi	r24, 0x30	; 48
     570:	b1 50       	subi	r27, 0x01	; 1
     572:	20 40       	sbci	r18, 0x00	; 0
     574:	80 40       	sbci	r24, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
     578:	00 c0       	rjmp	.+0      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
     57a:	00 00       	nop
     57c:	4d c0       	rjmp	.+154    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
			}
			else if(strcmp(uart_rec, "Left") == 0)
     57e:	6e ec       	ldi	r22, 0xCE	; 206
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	8f e0       	ldi	r24, 0x0F	; 15
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     58a:	89 2b       	or	r24, r25
     58c:	f9 f4       	brne	.+62     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
			{
				H_Lcd_GoTo(1,0);
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
				H_Lcd_WriteString("LFT");
     596:	83 ed       	ldi	r24, 0xD3	; 211
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
				 H_Motor_Left();
     59e:	0e 94 55 03 	call	0x6aa	; 0x6aa <H_Motor_Left>
     5a2:	9f ef       	ldi	r25, 0xFF	; 255
     5a4:	a3 ed       	ldi	r26, 0xD3	; 211
     5a6:	b0 e3       	ldi	r27, 0x30	; 48
     5a8:	91 50       	subi	r25, 0x01	; 1
     5aa:	a0 40       	sbci	r26, 0x00	; 0
     5ac:	b0 40       	sbci	r27, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5b2:	00 00       	nop
				_delay_ms(1000);
				H_Motor_Stop();_delay_ms(1000);
     5b4:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_Motor_Stop>
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	83 ed       	ldi	r24, 0xD3	; 211
     5bc:	90 e3       	ldi	r25, 0x30	; 48
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	80 40       	sbci	r24, 0x00	; 0
     5c2:	90 40       	sbci	r25, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5c8:	00 00       	nop
     5ca:	26 c0       	rjmp	.+76     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
			}
			else if(strcmp(uart_rec, "Right") == 0)
     5cc:	67 ed       	ldi	r22, 0xD7	; 215
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <strcmp>
     5d8:	89 2b       	or	r24, r25
     5da:	f1 f4       	brne	.+60     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
			{
				H_Lcd_GoTo(1,0);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 19 05 	call	0xa32	; 0xa32 <H_Lcd_GoTo>
				H_Lcd_WriteString("RHT");
     5e4:	8d ed       	ldi	r24, 0xDD	; 221
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
				 H_Motor_Right();
     5ec:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Motor_Right>
     5f0:	af ef       	ldi	r26, 0xFF	; 255
     5f2:	b3 ed       	ldi	r27, 0xD3	; 211
     5f4:	20 e3       	ldi	r18, 0x30	; 48
     5f6:	a1 50       	subi	r26, 0x01	; 1
     5f8:	b0 40       	sbci	r27, 0x00	; 0
     5fa:	20 40       	sbci	r18, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
     600:	00 00       	nop
				_delay_ms(1000);
				H_Motor_Stop();_delay_ms(1000);
     602:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_Motor_Stop>
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	93 ed       	ldi	r25, 0xD3	; 211
     60a:	a0 e3       	ldi	r26, 0x30	; 48
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	90 40       	sbci	r25, 0x00	; 0
     610:	a0 40       	sbci	r26, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
     614:	00 c0       	rjmp	.+0      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
     616:	00 00       	nop
				
			
		}
		
		H_Lcd_Clr();
		while(Mode == 1)
     618:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	09 f4       	brne	.+2      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
     620:	4d cf       	rjmp	.-358    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     622:	44 cf       	rjmp	.-376    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>

00000624 <H_Motor_Init>:
#include "DcMotor.h"


void H_Motor_Init()
{
	M_Dio_PinMode(MOTOR1_LEFT, OUTPUT);
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	8a e1       	ldi	r24, 0x1A	; 26
     628:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinMode(MOTOR1_RIGHT, OUTPUT);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	8b e1       	ldi	r24, 0x1B	; 27
     630:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	
	M_Dio_PinMode(MOTOR2_LEFT, OUTPUT);
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	89 e1       	ldi	r24, 0x19	; 25
     638:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinMode(MOTOR2_RIGHT, OUTPUT);
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	88 e1       	ldi	r24, 0x18	; 24
     640:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	
	M_Dio_PinWrite(MOTOR1_LEFT, LOW);
     644:	62 e0       	ldi	r22, 0x02	; 2
     646:	8a e1       	ldi	r24, 0x1A	; 26
     648:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_LEFT, LOW);
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	89 e1       	ldi	r24, 0x19	; 25
     650:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, LOW);
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	8b e1       	ldi	r24, 0x1B	; 27
     658:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, LOW);
     65c:	62 e0       	ldi	r22, 0x02	; 2
     65e:	88 e1       	ldi	r24, 0x18	; 24
     660:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     664:	08 95       	ret

00000666 <H_Motor_Forward>:
	
}
void H_Motor_Forward()
{
	M_Dio_PinWrite(MOTOR1_LEFT, HIGH);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	8a e1       	ldi	r24, 0x1A	; 26
     66a:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_LEFT, HIGH);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	89 e1       	ldi	r24, 0x19	; 25
     672:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, LOW);
     676:	62 e0       	ldi	r22, 0x02	; 2
     678:	8b e1       	ldi	r24, 0x1B	; 27
     67a:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, LOW);
     67e:	62 e0       	ldi	r22, 0x02	; 2
     680:	88 e1       	ldi	r24, 0x18	; 24
     682:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     686:	08 95       	ret

00000688 <H_Motor_Backward>:
}
void H_Motor_Backward()
{
	M_Dio_PinWrite(MOTOR1_LEFT, LOW);
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	8a e1       	ldi	r24, 0x1A	; 26
     68c:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_LEFT, LOW);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	89 e1       	ldi	r24, 0x19	; 25
     694:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, HIGH);
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	8b e1       	ldi	r24, 0x1B	; 27
     69c:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, HIGH);	
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	88 e1       	ldi	r24, 0x18	; 24
     6a4:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     6a8:	08 95       	ret

000006aa <H_Motor_Left>:
}

void H_Motor_Left()
{
	M_Dio_PinWrite(MOTOR2_LEFT, HIGH);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	89 e1       	ldi	r24, 0x19	; 25
     6ae:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR1_LEFT, LOW);
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	8a e1       	ldi	r24, 0x1A	; 26
     6b6:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, LOW);
     6ba:	62 e0       	ldi	r22, 0x02	; 2
     6bc:	8b e1       	ldi	r24, 0x1B	; 27
     6be:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, LOW);
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	88 e1       	ldi	r24, 0x18	; 24
     6c6:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     6ca:	08 95       	ret

000006cc <H_Motor_Right>:
	
}
void H_Motor_Right()
{
	M_Dio_PinWrite(MOTOR2_LEFT, LOW);
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	89 e1       	ldi	r24, 0x19	; 25
     6d0:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR1_LEFT, HIGH);
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	8a e1       	ldi	r24, 0x1A	; 26
     6d8:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, LOW);
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	8b e1       	ldi	r24, 0x1B	; 27
     6e0:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, LOW);
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	88 e1       	ldi	r24, 0x18	; 24
     6e8:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     6ec:	08 95       	ret

000006ee <H_Motor_Stop>:
}

void H_Motor_Stop()
{
	M_Dio_PinWrite(MOTOR2_LEFT, LOW);
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	89 e1       	ldi	r24, 0x19	; 25
     6f2:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR1_LEFT, LOW);
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	8a e1       	ldi	r24, 0x1A	; 26
     6fa:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	M_Dio_PinWrite(MOTOR1_RIGHT, LOW);
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	8b e1       	ldi	r24, 0x1B	; 27
     702:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR2_RIGHT, LOW);
     706:	62 e0       	ldi	r22, 0x02	; 2
     708:	88 e1       	ldi	r24, 0x18	; 24
     70a:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     70e:	08 95       	ret

00000710 <H_Lcd_WriteCharacter>:
	
	#endif
}

void H_Lcd_WriteCharacter(u8 Local_u8_Character)
{
     710:	cf 93       	push	r28
     712:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
	_delay_ms(5);
	
	#elif           LCD_MODE     ==    _4_BIT_MODE
	
	M_Dio_PinWrite(LCD_RS_PIN, HIGH);	
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	85 e1       	ldi	r24, 0x15	; 21
     718:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	LCD_DATA_PORT = (Local_u8_Character & 0xF0) | (LCD_DATA_PORT & 0x0F) ;
     71c:	8b b3       	in	r24, 0x1b	; 27
     71e:	9c 2f       	mov	r25, r28
     720:	90 7f       	andi	r25, 0xF0	; 240
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	89 2b       	or	r24, r25
     726:	8b bb       	out	0x1b, r24	; 27
	
	M_Dio_PinWrite(LCD_EN_PIN, HIGH);
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	84 e1       	ldi	r24, 0x14	; 20
     72c:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     730:	8f e9       	ldi	r24, 0x9F	; 159
     732:	9f e0       	ldi	r25, 0x0F	; 15
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <H_Lcd_WriteCharacter+0x24>
     738:	00 c0       	rjmp	.+0      	; 0x73a <H_Lcd_WriteCharacter+0x2a>
     73a:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
     73c:	62 e0       	ldi	r22, 0x02	; 2
     73e:	84 e1       	ldi	r24, 0x14	; 20
     740:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     744:	8f e1       	ldi	r24, 0x1F	; 31
     746:	9e e4       	ldi	r25, 0x4E	; 78
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <H_Lcd_WriteCharacter+0x38>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <H_Lcd_WriteCharacter+0x3e>
     74e:	00 00       	nop
	_delay_ms(5);
	
	LCD_DATA_PORT = (Local_u8_Character << 4) | (LCD_DATA_PORT & 0x0F) ;
     750:	2b b3       	in	r18, 0x1b	; 27
     752:	30 e1       	ldi	r19, 0x10	; 16
     754:	c3 9f       	mul	r28, r19
     756:	c0 01       	movw	r24, r0
     758:	11 24       	eor	r1, r1
     75a:	92 2f       	mov	r25, r18
     75c:	9f 70       	andi	r25, 0x0F	; 15
     75e:	89 2b       	or	r24, r25
     760:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN, HIGH);
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	84 e1       	ldi	r24, 0x14	; 20
     766:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     76a:	8f e9       	ldi	r24, 0x9F	; 159
     76c:	9f e0       	ldi	r25, 0x0F	; 15
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <H_Lcd_WriteCharacter+0x5e>
     772:	00 c0       	rjmp	.+0      	; 0x774 <H_Lcd_WriteCharacter+0x64>
     774:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	84 e1       	ldi	r24, 0x14	; 20
     77a:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     77e:	8f e1       	ldi	r24, 0x1F	; 31
     780:	9e e4       	ldi	r25, 0x4E	; 78
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <H_Lcd_WriteCharacter+0x72>
     786:	00 c0       	rjmp	.+0      	; 0x788 <H_Lcd_WriteCharacter+0x78>
     788:	00 00       	nop
	
	_delay_ms(5);
	#endif
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <H_Lcd_WriteCommand>:

void H_Lcd_WriteCommand(u8 Local_u8_Command)
{
     78e:	cf 93       	push	r28
     790:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_EN_PIN, HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
	_delay_ms(5);
	#elif           LCD_MODE     ==    _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN, LOW);
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	85 e1       	ldi	r24, 0x15	; 21
     796:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
	
	LCD_DATA_PORT = (Local_u8_Command & 0xF0) | (LCD_DATA_PORT & 0x0F);
     79a:	8b b3       	in	r24, 0x1b	; 27
     79c:	9c 2f       	mov	r25, r28
     79e:	90 7f       	andi	r25, 0xF0	; 240
     7a0:	8f 70       	andi	r24, 0x0F	; 15
     7a2:	89 2b       	or	r24, r25
     7a4:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN, HIGH);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     7ae:	8f e9       	ldi	r24, 0x9F	; 159
     7b0:	9f e0       	ldi	r25, 0x0F	; 15
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <H_Lcd_WriteCommand+0x24>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <H_Lcd_WriteCommand+0x2a>
     7b8:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	84 e1       	ldi	r24, 0x14	; 20
     7be:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     7c2:	8f e1       	ldi	r24, 0x1F	; 31
     7c4:	9e e4       	ldi	r25, 0x4E	; 78
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <H_Lcd_WriteCommand+0x38>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <H_Lcd_WriteCommand+0x3e>
     7cc:	00 00       	nop
	_delay_ms(5);
	
	LCD_DATA_PORT = (Local_u8_Command << 4) | (LCD_DATA_PORT & 0x0F);
     7ce:	2b b3       	in	r18, 0x1b	; 27
     7d0:	30 e1       	ldi	r19, 0x10	; 16
     7d2:	c3 9f       	mul	r28, r19
     7d4:	c0 01       	movw	r24, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	92 2f       	mov	r25, r18
     7da:	9f 70       	andi	r25, 0x0F	; 15
     7dc:	89 2b       	or	r24, r25
     7de:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN, HIGH);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	84 e1       	ldi	r24, 0x14	; 20
     7e4:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     7e8:	8f e9       	ldi	r24, 0x9F	; 159
     7ea:	9f e0       	ldi	r25, 0x0F	; 15
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <H_Lcd_WriteCommand+0x5e>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <H_Lcd_WriteCommand+0x64>
     7f2:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN, LOW);
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	84 e1       	ldi	r24, 0x14	; 20
     7f8:	0e 94 8c 06 	call	0xd18	; 0xd18 <M_Dio_PinWrite>
     7fc:	8f e1       	ldi	r24, 0x1F	; 31
     7fe:	9e e4       	ldi	r25, 0x4E	; 78
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <__DATA_REGION_LENGTH__>
     804:	00 c0       	rjmp	.+0      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     806:	00 00       	nop
	
	_delay_ms(5);
	#endif	
}
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <H_Lcd_Init>:
	H_Lcd_WriteCommand(DISPLAYON_CURSOROFF);
	H_Lcd_WriteCommand(LCD_CLEAR);
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
	
	#elif           LCD_MODE     ==    _4_BIT_MODE
	M_Dio_PinMode(LCD_DATA4_PIN, OUTPUT);
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	8e e0       	ldi	r24, 0x0E	; 14
     810:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA5_PIN, OUTPUT);
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	8f e0       	ldi	r24, 0x0F	; 15
     818:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA6_PIN, OUTPUT);
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	80 e1       	ldi	r24, 0x10	; 16
     820:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA7_PIN, OUTPUT);
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	81 e1       	ldi	r24, 0x11	; 17
     828:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
	
 	M_Dio_PinMode(LCD_RS_PIN, OUTPUT);
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	85 e1       	ldi	r24, 0x15	; 21
     830:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
// 	/*M_Dio_PinMode(LCD_RW_PIN, */OUTPUT);
	M_Dio_PinMode(LCD_EN_PIN, OUTPUT);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	84 e1       	ldi	r24, 0x14	; 20
     838:	0e 94 03 06 	call	0xc06	; 0xc06 <M_Dio_PinMode>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	83 ed       	ldi	r24, 0xD3	; 211
     840:	90 e3       	ldi	r25, 0x30	; 48
     842:	21 50       	subi	r18, 0x01	; 1
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <H_Lcd_Init+0x36>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <H_Lcd_Init+0x40>
     84c:	00 00       	nop
// 	M_Dio_PinWrite(LCD_RW_PIN, LOW);
	
	_delay_ms(1000);
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_1);
     84e:	83 e3       	ldi	r24, 0x33	; 51
     850:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_2);
     854:	82 e3       	ldi	r24, 0x32	; 50
     856:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_3);
     85a:	88 e2       	ldi	r24, 0x28	; 40
     85c:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(DISPLAYON_CURSOROFF);
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CLEAR);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
     872:	08 95       	ret

00000874 <H_Lcd_WriteString>:
	_delay_ms(5);
	#endif	
}

void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	fc 01       	movw	r30, r24
	u8 Local_u8_Cnt = 0;
	while(Local_u8_Ptr[Local_u8_Cnt] != _NULL)
     87c:	80 81       	ld	r24, Z
     87e:	88 23       	and	r24, r24
     880:	59 f0       	breq	.+22     	; 0x898 <H_Lcd_WriteString+0x24>
     882:	8f 01       	movw	r16, r30
     884:	c0 e0       	ldi	r28, 0x00	; 0
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Cnt]);
     886:	0e 94 88 03 	call	0x710	; 0x710 <H_Lcd_WriteCharacter>
		Local_u8_Cnt ++;
     88a:	cf 5f       	subi	r28, 0xFF	; 255
}

void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Cnt = 0;
	while(Local_u8_Ptr[Local_u8_Cnt] != _NULL)
     88c:	f8 01       	movw	r30, r16
     88e:	ec 0f       	add	r30, r28
     890:	f1 1d       	adc	r31, r1
     892:	80 81       	ld	r24, Z
     894:	81 11       	cpse	r24, r1
     896:	f7 cf       	rjmp	.-18     	; 0x886 <H_Lcd_WriteString+0x12>
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Cnt]);
		Local_u8_Cnt ++;
	}
	
}
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <H_Lcd_WriteNumber>:

void H_Lcd_WriteNumber(f32 Local_f32_Number) // ->124
{
     8a0:	4f 92       	push	r4
     8a2:	5f 92       	push	r5
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	64 97       	sbiw	r28, 0x14	; 20
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	6b 01       	movw	r12, r22
     8cc:	7c 01       	movw	r14, r24
	u8 Local_u8_Arr[10] = {0};
     8ce:	fe 01       	movw	r30, r28
     8d0:	31 96       	adiw	r30, 0x01	; 1
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	df 01       	movw	r26, r30
     8d6:	1d 92       	st	X+, r1
     8d8:	8a 95       	dec	r24
     8da:	e9 f7       	brne	.-6      	; 0x8d6 <H_Lcd_WriteNumber+0x36>
	s8 Local_s8_Cnt = 0;
	u8 Local_u8_Digit = 0;
	u8 Local_u8_NumArr[10];
	
	if(Local_f32_Number == 0) H_Lcd_WriteCharacter('0');
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	c7 01       	movw	r24, r14
     8e4:	b6 01       	movw	r22, r12
     8e6:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     8ea:	81 11       	cpse	r24, r1
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <H_Lcd_WriteNumber+0x56>
     8ee:	80 e3       	ldi	r24, 0x30	; 48
     8f0:	0e 94 88 03 	call	0x710	; 0x710 <H_Lcd_WriteCharacter>
     8f4:	86 c0       	rjmp	.+268    	; 0xa02 <H_Lcd_WriteNumber+0x162>
	
	else
	{
		if(!IsInteger(Local_f32_Number))
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     8fe:	0e 94 c6 08 	call	0x118c	; 0x118c <__floatunsisf>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	c7 01       	movw	r24, r14
     908:	b6 01       	movw	r22, r12
     90a:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     90e:	88 23       	and	r24, r24
     910:	c9 f0       	breq	.+50     	; 0x944 <H_Lcd_WriteNumber+0xa4>
		{
			sprintf(Local_u8_NumArr, "%.2f", Local_f32_Number);
     912:	ff 92       	push	r15
     914:	ef 92       	push	r14
     916:	df 92       	push	r13
     918:	cf 92       	push	r12
     91a:	81 ee       	ldi	r24, 0xE1	; 225
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	7e 01       	movw	r14, r28
     924:	bb e0       	ldi	r27, 0x0B	; 11
     926:	eb 0e       	add	r14, r27
     928:	f1 1c       	adc	r15, r1
     92a:	ff 92       	push	r15
     92c:	ef 92       	push	r14
     92e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <sprintf>
			H_Lcd_WriteString(Local_u8_NumArr);
     932:	c7 01       	movw	r24, r14
     934:	0e 94 3a 04 	call	0x874	; 0x874 <H_Lcd_WriteString>
			return;
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	5f c0       	rjmp	.+190    	; 0xa02 <H_Lcd_WriteNumber+0x162>
		}
		else if(Local_f32_Number < 0)
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	8c f4       	brge	.+34     	; 0x978 <H_Lcd_WriteNumber+0xd8>
		{
			H_Lcd_WriteCharacter('-');
     956:	8d e2       	ldi	r24, 0x2D	; 45
     958:	0e 94 88 03 	call	0x710	; 0x710 <H_Lcd_WriteCharacter>
			Local_f32_Number = Local_f32_Number * -1;
     95c:	f7 fa       	bst	r15, 7
     95e:	f0 94       	com	r15
     960:	f7 f8       	bld	r15, 7
     962:	f0 94       	com	r15
		}
		while (Local_f32_Number != 0)
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	a9 01       	movw	r20, r18
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <H_Lcd_WriteNumber+0xd8>
     976:	45 c0       	rjmp	.+138    	; 0xa02 <H_Lcd_WriteNumber+0x162>
	}
	
}

void H_Lcd_WriteNumber(f32 Local_f32_Number) // ->124
{
     978:	10 e0       	ldi	r17, 0x00	; 0
			Local_f32_Number = Local_f32_Number * -1;
		}
		while (Local_f32_Number != 0)
		{
			Local_u8_Digit             = (u32)Local_f32_Number % 10;
			Local_u8_Arr[Local_s8_Cnt] = Local_u8_Digit;
     97a:	0f 2e       	mov	r0, r31
     97c:	fa e0       	ldi	r31, 0x0A	; 10
     97e:	4f 2e       	mov	r4, r31
     980:	51 2c       	mov	r5, r1
     982:	61 2c       	mov	r6, r1
     984:	71 2c       	mov	r7, r1
     986:	f0 2d       	mov	r31, r0
     988:	01 c0       	rjmp	.+2      	; 0x98c <H_Lcd_WriteNumber+0xec>
			Local_s8_Cnt ++;
     98a:	1b 2d       	mov	r17, r11
			Local_f32_Number = Local_f32_Number * -1;
		}
		while (Local_f32_Number != 0)
		{
			Local_u8_Digit             = (u32)Local_f32_Number % 10;
			Local_u8_Arr[Local_s8_Cnt] = Local_u8_Digit;
     98c:	aa 24       	eor	r10, r10
     98e:	a3 94       	inc	r10
     990:	b1 2c       	mov	r11, r1
     992:	ac 0e       	add	r10, r28
     994:	bd 1e       	adc	r11, r29
     996:	a1 0e       	add	r10, r17
     998:	b1 1c       	adc	r11, r1
     99a:	17 fd       	sbrc	r17, 7
     99c:	ba 94       	dec	r11
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     9a6:	a3 01       	movw	r20, r6
     9a8:	92 01       	movw	r18, r4
     9aa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
     9ae:	d5 01       	movw	r26, r10
     9b0:	6c 93       	st	X, r22
     9b2:	bb 24       	eor	r11, r11
     9b4:	b3 94       	inc	r11
     9b6:	b1 0e       	add	r11, r17
			Local_s8_Cnt ++;
			Local_f32_Number = (u32)(Local_f32_Number / 10);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e2       	ldi	r20, 0x20	; 32
     9be:	51 e4       	ldi	r21, 0x41	; 65
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     9c8:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     9cc:	0e 94 c6 08 	call	0x118c	; 0x118c <__floatunsisf>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
		else if(Local_f32_Number < 0)
		{
			H_Lcd_WriteCharacter('-');
			Local_f32_Number = Local_f32_Number * -1;
		}
		while (Local_f32_Number != 0)
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	a9 01       	movw	r20, r18
     9da:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     9de:	81 11       	cpse	r24, r1
     9e0:	d4 cf       	rjmp	.-88     	; 0x98a <H_Lcd_WriteNumber+0xea>
			Local_u8_Arr[Local_s8_Cnt] = Local_u8_Digit;
			Local_s8_Cnt ++;
			Local_f32_Number = (u32)(Local_f32_Number / 10);
		}
		Local_s8_Cnt --;
		while(Local_s8_Cnt >= 0)
     9e2:	11 23       	and	r17, r17
     9e4:	74 f0       	brlt	.+28     	; 0xa02 <H_Lcd_WriteNumber+0x162>
		{
			H_Lcd_WriteCharacter(Local_u8_Arr[Local_s8_Cnt] + 48);
     9e6:	e1 e0       	ldi	r30, 0x01	; 1
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ec 0f       	add	r30, r28
     9ec:	fd 1f       	adc	r31, r29
     9ee:	e1 0f       	add	r30, r17
     9f0:	f1 1d       	adc	r31, r1
     9f2:	17 fd       	sbrc	r17, 7
     9f4:	fa 95       	dec	r31
     9f6:	80 81       	ld	r24, Z
     9f8:	80 5d       	subi	r24, 0xD0	; 208
     9fa:	0e 94 88 03 	call	0x710	; 0x710 <H_Lcd_WriteCharacter>
     9fe:	11 50       	subi	r17, 0x01	; 1
			Local_u8_Arr[Local_s8_Cnt] = Local_u8_Digit;
			Local_s8_Cnt ++;
			Local_f32_Number = (u32)(Local_f32_Number / 10);
		}
		Local_s8_Cnt --;
		while(Local_s8_Cnt >= 0)
     a00:	92 f7       	brpl	.-28     	; 0x9e6 <H_Lcd_WriteNumber+0x146>
		{
			H_Lcd_WriteCharacter(Local_u8_Arr[Local_s8_Cnt] + 48);
			Local_s8_Cnt --;
		}
	}
}
     a02:	64 96       	adiw	r28, 0x14	; 20
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
     a24:	5f 90       	pop	r5
     a26:	4f 90       	pop	r4
     a28:	08 95       	ret

00000a2a <H_Lcd_Clr>:

void H_Lcd_Clr(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
     a30:	08 95       	ret

00000a32 <H_Lcd_GoTo>:
}

void H_Lcd_GoTo(u8 Local_u8_Row, u8 Local_u8_Col)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <H_Lcd_GoTo+0x6>
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
	
	u8 Local_u8_Arr[2] = {0x80, 0xC0};
     a3c:	90 e8       	ldi	r25, 0x80	; 128
     a3e:	99 83       	std	Y+1, r25	; 0x01
     a40:	90 ec       	ldi	r25, 0xC0	; 192
     a42:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
     a44:	fe 01       	movw	r30, r28
     a46:	e8 0f       	add	r30, r24
     a48:	f1 1d       	adc	r31, r1
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	86 0f       	add	r24, r22
     a4e:	0e 94 c7 03 	call	0x78e	; 0x78e <H_Lcd_WriteCommand>
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <PCA9685_init>:


// Init the chip with pwm frequency and MODE2 settings

void PCA9685_init(){
	M_Twi_StartCondition();             // Start
     a5c:	0e 94 52 07 	call	0xea4	; 0xea4 <M_Twi_StartCondition>
	H_Lcd_WriteNumber(1);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
	M_Twi_SlaveAddressWrite(Write_address);   // Slave Write_address
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_Twi_SlaveAddressWrite>
	H_Lcd_WriteNumber(2);
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
	M_Twi_SendByte(MODE1);           // Mode 1 ADDRESS
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	H_Lcd_WriteNumber(3);
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
	M_Twi_SendByte(0b00110001);      // Sleep and change default PWM frequency
     a84:	81 e3       	ldi	r24, 0x31	; 49
     a86:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	H_Lcd_WriteNumber(4);
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <H_Lcd_WriteNumber>
	M_Twi_StopCondition();              // Stop
     a92:	0e 94 73 07 	call	0xee6	; 0xee6 <M_Twi_StopCondition>
     a96:	8f e9       	ldi	r24, 0x9F	; 159
     a98:	9f e0       	ldi	r25, 0x0F	; 15
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <PCA9685_init+0x3e>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <PCA9685_init+0x44>
     aa0:	00 00       	nop
	_delay_ms(1);              // Required 50 us delay
	M_Twi_StartCondition();             // Start
     aa2:	0e 94 52 07 	call	0xea4	; 0xea4 <M_Twi_StartCondition>
	M_Twi_SlaveAddressWrite(Write_address);   // Slave Write_address
     aa6:	80 e4       	ldi	r24, 0x40	; 64
     aa8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_Twi_SlaveAddressWrite>
	M_Twi_SendByte(0xFE);            // PWM frequency PRE_SCALE ADDRESS to set pwm at 100Hz
     aac:	8e ef       	ldi	r24, 0xFE	; 254
     aae:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_SendByte(0x7A);            // Osc_clk/(4096*update_rate)=25000000/(4096*60)=0x65
     ab2:	8a e7       	ldi	r24, 0x7A	; 122
     ab4:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_StopCondition();              // Stop
     ab8:	0e 94 73 07 	call	0xee6	; 0xee6 <M_Twi_StopCondition>
     abc:	8f e9       	ldi	r24, 0x9F	; 159
     abe:	9f e0       	ldi	r25, 0x0F	; 15
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <PCA9685_init+0x64>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <PCA9685_init+0x6a>
     ac6:	00 00       	nop
	_delay_ms(1);              // delay at least 500 us
	M_Twi_StartCondition();             // Start
     ac8:	0e 94 52 07 	call	0xea4	; 0xea4 <M_Twi_StartCondition>
	M_Twi_SlaveAddressWrite(Write_address);   // Slave Write_address
     acc:	80 e4       	ldi	r24, 0x40	; 64
     ace:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_Twi_SlaveAddressWrite>
	M_Twi_SendByte(MODE1);           // Mode 1 register ADDRESS
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_SendByte(0b10100001);      // Set MODE1
     ad8:	81 ea       	ldi	r24, 0xA1	; 161
     ada:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_StopCondition();              // Stop
     ade:	0e 94 73 07 	call	0xee6	; 0xee6 <M_Twi_StopCondition>
     ae2:	8f e9       	ldi	r24, 0x9F	; 159
     ae4:	9f e0       	ldi	r25, 0x0F	; 15
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <PCA9685_init+0x8a>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <PCA9685_init+0x90>
     aec:	00 00       	nop
	_delay_ms(1);              // delay at least 500 us
	M_Twi_StartCondition();             // Start
     aee:	0e 94 52 07 	call	0xea4	; 0xea4 <M_Twi_StartCondition>
	M_Twi_SlaveAddressWrite(Write_address);   // Slave Address
     af2:	80 e4       	ldi	r24, 0x40	; 64
     af4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_Twi_SlaveAddressWrite>
	M_Twi_SendByte(MODE2);           // Mode2 register ADDRESS
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_SendByte(0b00000100);      // Set MODE2
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_StopCondition();              //
     b04:	0e 94 73 07 	call	0xee6	; 0xee6 <M_Twi_StopCondition>
     b08:	08 95       	ret

00000b0a <H_Sero_Init>:

#include "Servo.h"

void H_Sero_Init(void)
{
	M_Twi_Init();
     b0a:	0e 94 4c 07 	call	0xe98	; 0xe98 <M_Twi_Init>
	PCA9685_init();
     b0e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <PCA9685_init>
     b12:	08 95       	ret

00000b14 <PCA9685_send>:
	M_Twi_SendByte(MODE2);           // Mode2 register ADDRESS
	M_Twi_SendByte(0b00000100);      // Set MODE2
	M_Twi_StopCondition();              //
}
// Send pulse length[0-4095] to selected LED/SERVO[0-15]
void PCA9685_send(unsigned int value, unsigned char led){
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	18 2f       	mov	r17, r24
     b1c:	d9 2f       	mov	r29, r25
     b1e:	c6 2f       	mov	r28, r22
	unsigned char pulse_length;// temp variable for PWM
	M_Twi_StartCondition();              // Start
     b20:	0e 94 52 07 	call	0xea4	; 0xea4 <M_Twi_StartCondition>
	M_Twi_SlaveAddressWrite(Write_address);    // address of selected pca9685
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_Twi_SlaveAddressWrite>
	M_Twi_SendByte(LED0 + 4 * led);   // select slected LED ADDRESS
     b2a:	8c 2f       	mov	r24, r28
     b2c:	88 0f       	add	r24, r24
     b2e:	88 0f       	add	r24, r24
     b30:	8a 5f       	subi	r24, 0xFA	; 250
     b32:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_SendByte(0x00);             // LED_ON_L
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_SendByte(0x00);             // LED_ON_H
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	pulse_length = value;      // PWM value lo byte
	M_Twi_SendByte(pulse_length);     // LED_OFF_L
     b42:	81 2f       	mov	r24, r17
     b44:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	pulse_length = value>>8;   // pwm 16 bit long, now shift upper 8 to lower 8
	M_Twi_SendByte(pulse_length);     // LED_OFF_H
     b48:	8d 2f       	mov	r24, r29
     b4a:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Twi_SendByte>
	M_Twi_StopCondition();               // stop
     b4e:	0e 94 73 07 	call	0xee6	; 0xee6 <M_Twi_StopCondition>
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	08 95       	ret

00000b5a <H_Servo_SetAngle>:
{
	M_Twi_Init();
	PCA9685_init();
}
void H_Servo_SetAngle(char Servo_number, unsigned char angle)
{
     b5a:	cf 93       	push	r28
     b5c:	c8 2f       	mov	r28, r24
	u16 x = 0;
	
	if(Servo_number == ARM_BASE) x = (((angle / 360.0) * (max - min)) + min);
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	d9 f4       	brne	.+54     	; 0xb98 <H_Servo_SetAngle+0x3e>
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	44 eb       	ldi	r20, 0xB4	; 180
     b72:	53 e4       	ldi	r21, 0x43	; 67
     b74:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4d ea       	ldi	r20, 0xAD	; 173
     b7e:	53 e4       	ldi	r21, 0x43	; 67
     b80:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	4c e4       	ldi	r20, 0x4C	; 76
     b8a:	53 e4       	ldi	r21, 0x43	; 67
     b8c:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3>
     b90:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     b94:	cb 01       	movw	r24, r22
     b96:	1a c0       	rjmp	.+52     	; 0xbcc <H_Servo_SetAngle+0x72>
	else x = (((angle / 180.0) * (max - min)) + min);
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	44 e3       	ldi	r20, 0x34	; 52
     ba8:	53 e4       	ldi	r21, 0x43	; 67
     baa:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4d ea       	ldi	r20, 0xAD	; 173
     bb4:	53 e4       	ldi	r21, 0x43	; 67
     bb6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__mulsf3>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4c e4       	ldi	r20, 0x4C	; 76
     bc0:	53 e4       	ldi	r21, 0x43	; 67
     bc2:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3>
     bc6:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     bca:	cb 01       	movw	r24, r22
	//uart1_write((x+48));
	PCA9685_send(x,Servo_number);
     bcc:	6c 2f       	mov	r22, r28
     bce:	0e 94 8a 05 	call	0xb14	; 0xb14 <PCA9685_send>
	//_delay_ms(1);
	//PCA9685_soft_reset();
	
}
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <H_Servo_360>:

void H_Servo_360(u8 Local_u8_Mode)
{
	switch(Local_u8_Mode)
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	51 f0       	breq	.+20     	; 0xbee <H_Servo_360+0x18>
     bda:	18 f0       	brcs	.+6      	; 0xbe2 <H_Servo_360+0xc>
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	69 f0       	breq	.+26     	; 0xbfa <H_Servo_360+0x24>
     be0:	08 95       	ret
	{
		case CLOCKWISE : PCA9685_send(min,ARM_BASE);break;
     be2:	63 e0       	ldi	r22, 0x03	; 3
     be4:	8c ec       	ldi	r24, 0xCC	; 204
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 8a 05 	call	0xb14	; 0xb14 <PCA9685_send>
     bec:	08 95       	ret
		case ANTICLOCKWISE : PCA9685_send(max,ARM_BASE);break;
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	86 e2       	ldi	r24, 0x26	; 38
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 8a 05 	call	0xb14	; 0xb14 <PCA9685_send>
     bf8:	08 95       	ret
		case STOP : PCA9685_send(((max-min)/2),ARM_BASE);break;
     bfa:	63 e0       	ldi	r22, 0x03	; 3
     bfc:	8d ea       	ldi	r24, 0xAD	; 173
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 8a 05 	call	0xb14	; 0xb14 <PCA9685_send>
     c04:	08 95       	ret

00000c06 <M_Dio_PinMode>:

#include "Dio.h"

void M_Dio_PinMode(u8 Local_u8_Num,u8 Local_u8_Mode)   
{ 
	u8 Local_u8_Pin  = Local_u8_Num % 10;
     c06:	9d ec       	ldi	r25, 0xCD	; 205
     c08:	89 9f       	mul	r24, r25
     c0a:	91 2d       	mov	r25, r1
     c0c:	11 24       	eor	r1, r1
     c0e:	29 2f       	mov	r18, r25
     c10:	26 95       	lsr	r18
     c12:	26 95       	lsr	r18
     c14:	26 95       	lsr	r18
     c16:	22 0f       	add	r18, r18
     c18:	32 2f       	mov	r19, r18
     c1a:	33 0f       	add	r19, r19
     c1c:	33 0f       	add	r19, r19
     c1e:	23 0f       	add	r18, r19
     c20:	82 1b       	sub	r24, r18
     c22:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
     c24:	96 95       	lsr	r25
     c26:	96 95       	lsr	r25
     c28:	96 95       	lsr	r25
	switch(Local_u8_Mode)
     c2a:	61 30       	cpi	r22, 0x01	; 1
     c2c:	19 f0       	breq	.+6      	; 0xc34 <M_Dio_PinMode+0x2e>
     c2e:	62 30       	cpi	r22, 0x02	; 2
     c30:	c1 f1       	breq	.+112    	; 0xca2 <M_Dio_PinMode+0x9c>
     c32:	08 95       	ret
	{
		case OUTPUT:
		switch(Local_u8_Port)
     c34:	92 30       	cpi	r25, 0x02	; 2
     c36:	a1 f0       	breq	.+40     	; 0xc60 <M_Dio_PinMode+0x5a>
     c38:	18 f4       	brcc	.+6      	; 0xc40 <M_Dio_PinMode+0x3a>
     c3a:	91 30       	cpi	r25, 0x01	; 1
     c3c:	31 f0       	breq	.+12     	; 0xc4a <M_Dio_PinMode+0x44>
     c3e:	08 95       	ret
     c40:	93 30       	cpi	r25, 0x03	; 3
     c42:	c9 f0       	breq	.+50     	; 0xc76 <M_Dio_PinMode+0x70>
     c44:	94 30       	cpi	r25, 0x04	; 4
     c46:	11 f1       	breq	.+68     	; 0xc8c <M_Dio_PinMode+0x86>
     c48:	08 95       	ret
		{
			case 1: SetBit(_DDRA,Local_u8_Pin); break;
     c4a:	3a b3       	in	r19, 0x1a	; 26
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <M_Dio_PinMode+0x50>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <M_Dio_PinMode+0x4c>
     c5a:	83 2b       	or	r24, r19
     c5c:	8a bb       	out	0x1a, r24	; 26
     c5e:	08 95       	ret
			case 2: SetBit(_DDRB,Local_u8_Pin); break;
     c60:	37 b3       	in	r19, 0x17	; 23
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <M_Dio_PinMode+0x66>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	2a 95       	dec	r18
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <M_Dio_PinMode+0x62>
     c70:	83 2b       	or	r24, r19
     c72:	87 bb       	out	0x17, r24	; 23
     c74:	08 95       	ret
			case 3: SetBit(_DDRC,Local_u8_Pin); break;
     c76:	34 b3       	in	r19, 0x14	; 20
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <M_Dio_PinMode+0x7c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	2a 95       	dec	r18
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <M_Dio_PinMode+0x78>
     c86:	83 2b       	or	r24, r19
     c88:	84 bb       	out	0x14, r24	; 20
     c8a:	08 95       	ret
			case 4: SetBit(_DDRD,Local_u8_Pin); break;
     c8c:	31 b3       	in	r19, 0x11	; 17
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <M_Dio_PinMode+0x92>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	2a 95       	dec	r18
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <M_Dio_PinMode+0x8e>
     c9c:	83 2b       	or	r24, r19
     c9e:	81 bb       	out	0x11, r24	; 17
     ca0:	08 95       	ret
			default:                           break;
		}
		break;
		case INPUT:
		switch(Local_u8_Port)
     ca2:	92 30       	cpi	r25, 0x02	; 2
     ca4:	a9 f0       	breq	.+42     	; 0xcd0 <M_Dio_PinMode+0xca>
     ca6:	18 f4       	brcc	.+6      	; 0xcae <M_Dio_PinMode+0xa8>
     ca8:	91 30       	cpi	r25, 0x01	; 1
     caa:	31 f0       	breq	.+12     	; 0xcb8 <M_Dio_PinMode+0xb2>
     cac:	08 95       	ret
     cae:	93 30       	cpi	r25, 0x03	; 3
     cb0:	d9 f0       	breq	.+54     	; 0xce8 <M_Dio_PinMode+0xe2>
     cb2:	94 30       	cpi	r25, 0x04	; 4
     cb4:	29 f1       	breq	.+74     	; 0xd00 <M_Dio_PinMode+0xfa>
     cb6:	08 95       	ret
		{
			case 1: ClrBit(_DDRA,Local_u8_Pin); break;
     cb8:	3a b3       	in	r19, 0x1a	; 26
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <M_Dio_PinMode+0xbe>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	2a 95       	dec	r18
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <M_Dio_PinMode+0xba>
     cc8:	80 95       	com	r24
     cca:	83 23       	and	r24, r19
     ccc:	8a bb       	out	0x1a, r24	; 26
     cce:	08 95       	ret
			case 2: ClrBit(_DDRB,Local_u8_Pin); break;
     cd0:	37 b3       	in	r19, 0x17	; 23
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <M_Dio_PinMode+0xd6>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	2a 95       	dec	r18
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <M_Dio_PinMode+0xd2>
     ce0:	80 95       	com	r24
     ce2:	83 23       	and	r24, r19
     ce4:	87 bb       	out	0x17, r24	; 23
     ce6:	08 95       	ret
			case 3: ClrBit(_DDRC,Local_u8_Pin); break;
     ce8:	34 b3       	in	r19, 0x14	; 20
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <M_Dio_PinMode+0xee>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	2a 95       	dec	r18
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <M_Dio_PinMode+0xea>
     cf8:	80 95       	com	r24
     cfa:	83 23       	and	r24, r19
     cfc:	84 bb       	out	0x14, r24	; 20
     cfe:	08 95       	ret
			case 4: ClrBit(_DDRD,Local_u8_Pin); break;
     d00:	31 b3       	in	r19, 0x11	; 17
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <M_Dio_PinMode+0x106>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	2a 95       	dec	r18
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <M_Dio_PinMode+0x102>
     d10:	80 95       	com	r24
     d12:	83 23       	and	r24, r19
     d14:	81 bb       	out	0x11, r24	; 17
     d16:	08 95       	ret

00000d18 <M_Dio_PinWrite>:
	}
}

void M_Dio_PinWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
     d18:	9d ec       	ldi	r25, 0xCD	; 205
     d1a:	89 9f       	mul	r24, r25
     d1c:	91 2d       	mov	r25, r1
     d1e:	11 24       	eor	r1, r1
     d20:	29 2f       	mov	r18, r25
     d22:	26 95       	lsr	r18
     d24:	26 95       	lsr	r18
     d26:	26 95       	lsr	r18
     d28:	22 0f       	add	r18, r18
     d2a:	32 2f       	mov	r19, r18
     d2c:	33 0f       	add	r19, r19
     d2e:	33 0f       	add	r19, r19
     d30:	23 0f       	add	r18, r19
     d32:	82 1b       	sub	r24, r18
     d34:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
     d36:	96 95       	lsr	r25
     d38:	96 95       	lsr	r25
     d3a:	96 95       	lsr	r25
	switch(Local_u8_Mode)
     d3c:	61 30       	cpi	r22, 0x01	; 1
     d3e:	19 f0       	breq	.+6      	; 0xd46 <M_Dio_PinWrite+0x2e>
     d40:	62 30       	cpi	r22, 0x02	; 2
     d42:	c1 f1       	breq	.+112    	; 0xdb4 <M_Dio_PinWrite+0x9c>
     d44:	08 95       	ret
	{
		case HIGH:
		switch(Local_u8_Port)
     d46:	92 30       	cpi	r25, 0x02	; 2
     d48:	a1 f0       	breq	.+40     	; 0xd72 <M_Dio_PinWrite+0x5a>
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <M_Dio_PinWrite+0x3a>
     d4c:	91 30       	cpi	r25, 0x01	; 1
     d4e:	31 f0       	breq	.+12     	; 0xd5c <M_Dio_PinWrite+0x44>
     d50:	08 95       	ret
     d52:	93 30       	cpi	r25, 0x03	; 3
     d54:	c9 f0       	breq	.+50     	; 0xd88 <M_Dio_PinWrite+0x70>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	11 f1       	breq	.+68     	; 0xd9e <M_Dio_PinWrite+0x86>
     d5a:	08 95       	ret
		{
			case 1: SetBit(_PORTA,Local_u8_Pin); break;
     d5c:	3b b3       	in	r19, 0x1b	; 27
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <M_Dio_PinWrite+0x50>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	2a 95       	dec	r18
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <M_Dio_PinWrite+0x4c>
     d6c:	83 2b       	or	r24, r19
     d6e:	8b bb       	out	0x1b, r24	; 27
     d70:	08 95       	ret
			case 2: SetBit(_PORTB,Local_u8_Pin); break;
     d72:	38 b3       	in	r19, 0x18	; 24
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <M_Dio_PinWrite+0x66>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	2a 95       	dec	r18
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <M_Dio_PinWrite+0x62>
     d82:	83 2b       	or	r24, r19
     d84:	88 bb       	out	0x18, r24	; 24
     d86:	08 95       	ret
			case 3: SetBit(_PORTC,Local_u8_Pin); break;
     d88:	35 b3       	in	r19, 0x15	; 21
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <M_Dio_PinWrite+0x7c>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	2a 95       	dec	r18
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <M_Dio_PinWrite+0x78>
     d98:	83 2b       	or	r24, r19
     d9a:	85 bb       	out	0x15, r24	; 21
     d9c:	08 95       	ret
			case 4: SetBit(_PORTD,Local_u8_Pin); break;
     d9e:	32 b3       	in	r19, 0x12	; 18
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <M_Dio_PinWrite+0x92>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	2a 95       	dec	r18
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <M_Dio_PinWrite+0x8e>
     dae:	83 2b       	or	r24, r19
     db0:	82 bb       	out	0x12, r24	; 18
     db2:	08 95       	ret
			default:                           break;
		}
		break;
		case LOW:
		switch(Local_u8_Port)
     db4:	92 30       	cpi	r25, 0x02	; 2
     db6:	a9 f0       	breq	.+42     	; 0xde2 <M_Dio_PinWrite+0xca>
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <M_Dio_PinWrite+0xa8>
     dba:	91 30       	cpi	r25, 0x01	; 1
     dbc:	31 f0       	breq	.+12     	; 0xdca <M_Dio_PinWrite+0xb2>
     dbe:	08 95       	ret
     dc0:	93 30       	cpi	r25, 0x03	; 3
     dc2:	d9 f0       	breq	.+54     	; 0xdfa <M_Dio_PinWrite+0xe2>
     dc4:	94 30       	cpi	r25, 0x04	; 4
     dc6:	29 f1       	breq	.+74     	; 0xe12 <M_Dio_PinWrite+0xfa>
     dc8:	08 95       	ret
		{
			case 1: ClrBit(_PORTA,Local_u8_Pin); break;
     dca:	3b b3       	in	r19, 0x1b	; 27
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <M_Dio_PinWrite+0xbe>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	2a 95       	dec	r18
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <M_Dio_PinWrite+0xba>
     dda:	80 95       	com	r24
     ddc:	83 23       	and	r24, r19
     dde:	8b bb       	out	0x1b, r24	; 27
     de0:	08 95       	ret
			case 2: ClrBit(_PORTB,Local_u8_Pin); break;
     de2:	38 b3       	in	r19, 0x18	; 24
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <M_Dio_PinWrite+0xd6>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	2a 95       	dec	r18
     df0:	e2 f7       	brpl	.-8      	; 0xdea <M_Dio_PinWrite+0xd2>
     df2:	80 95       	com	r24
     df4:	83 23       	and	r24, r19
     df6:	88 bb       	out	0x18, r24	; 24
     df8:	08 95       	ret
			case 3: ClrBit(_PORTC,Local_u8_Pin); break;
     dfa:	35 b3       	in	r19, 0x15	; 21
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <M_Dio_PinWrite+0xee>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <M_Dio_PinWrite+0xea>
     e0a:	80 95       	com	r24
     e0c:	83 23       	and	r24, r19
     e0e:	85 bb       	out	0x15, r24	; 21
     e10:	08 95       	ret
			case 4: ClrBit(_PORTD,Local_u8_Pin); break;
     e12:	32 b3       	in	r19, 0x12	; 18
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <M_Dio_PinWrite+0x106>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	2a 95       	dec	r18
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <M_Dio_PinWrite+0x102>
     e22:	80 95       	com	r24
     e24:	83 23       	and	r24, r19
     e26:	82 bb       	out	0x12, r24	; 18
     e28:	08 95       	ret

00000e2a <M_Timer0_Init>:
void (*_Callback)(void) = _NULL ;

void  M_Timer0_Init(void)
{
	
	_OCR0 = 249;                 ////
     e2a:	89 ef       	ldi	r24, 0xF9	; 249
     e2c:	8c bf       	out	0x3c, r24	; 60
	_TCCR0 = 0x28;				//
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	83 bf       	out	0x33, r24	; 51
	_TCCR0 |= 0x03;				// -> TIMER0 INIT AS TEST (CTC INTERRUPT)
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	83 60       	ori	r24, 0x03	; 3
     e36:	83 bf       	out	0x33, r24	; 51
	_TIMSK |= (1<<1);		//
     e38:	89 b7       	in	r24, 0x39	; 57
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	89 bf       	out	0x39, r24	; 57
     e3e:	08 95       	ret

00000e40 <M_Timer0_SetCallBack>:
}

void M_Timer0_SetCallBack(void (*Ptr)(void))
{
	_Callback = Ptr;
     e40:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_Callback+0x1>
     e44:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_Callback>
     e48:	08 95       	ret

00000e4a <__vector_10>:
}


ISR(TIMER0_COMP_vect)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
	_Callback();
     e6c:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <_Callback>
     e70:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <_Callback+0x1>
     e74:	09 95       	icall
	
}
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <M_Twi_Init>:
{
	_TWCR = 0xA4; //to clear interrupt flag and Set StartCondition Bit
	//wait until finish
	while( !(GetBit(_TWCR, 7)) );
	while( (_TWSR & 0xF8) != 0x10);
}
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	80 b9       	out	0x00, r24	; 0
     e9c:	86 b7       	in	r24, 0x36	; 54
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	86 bf       	out	0x36, r24	; 54
     ea2:	08 95       	ret

00000ea4 <M_Twi_StartCondition>:
     ea4:	84 ea       	ldi	r24, 0xA4	; 164
     ea6:	86 bf       	out	0x36, r24	; 54
     ea8:	06 b6       	in	r0, 0x36	; 54
     eaa:	07 fe       	sbrs	r0, 7
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <M_Twi_StartCondition+0x4>
     eae:	81 b1       	in	r24, 0x01	; 1
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	e1 f7       	brne	.-8      	; 0xeae <M_Twi_StartCondition+0xa>
     eb6:	08 95       	ret

00000eb8 <M_Twi_SlaveAddressWrite>:
     eb8:	88 0f       	add	r24, r24
     eba:	83 b9       	out	0x03, r24	; 3
     ebc:	84 e8       	ldi	r24, 0x84	; 132
     ebe:	86 bf       	out	0x36, r24	; 54
     ec0:	06 b6       	in	r0, 0x36	; 54
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <M_Twi_SlaveAddressWrite+0x8>
     ec6:	81 b1       	in	r24, 0x01	; 1
     ec8:	88 7f       	andi	r24, 0xF8	; 248
     eca:	88 31       	cpi	r24, 0x18	; 24
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <M_Twi_SlaveAddressWrite+0xe>
     ece:	08 95       	ret

00000ed0 <M_Twi_SendByte>:
     ed0:	83 b9       	out	0x03, r24	; 3
     ed2:	84 e8       	ldi	r24, 0x84	; 132
     ed4:	86 bf       	out	0x36, r24	; 54
     ed6:	06 b6       	in	r0, 0x36	; 54
     ed8:	07 fe       	sbrs	r0, 7
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <M_Twi_SendByte+0x6>
     edc:	81 b1       	in	r24, 0x01	; 1
     ede:	88 7f       	andi	r24, 0xF8	; 248
     ee0:	88 32       	cpi	r24, 0x28	; 40
     ee2:	e1 f7       	brne	.-8      	; 0xedc <M_Twi_SendByte+0xc>
     ee4:	08 95       	ret

00000ee6 <M_Twi_StopCondition>:

void M_Twi_StopCondition(void)
{
	_TWCR = 0x94; //to clear interrupt flag and Set StopCondition Bit
     ee6:	84 e9       	ldi	r24, 0x94	; 148
     ee8:	86 bf       	out	0x36, r24	; 54
     eea:	08 95       	ret

00000eec <M_Uart_Init>:

void M_Uart_Stop(void)
{
	ClrBit(_UCSRB, 7);  //to enable Rx interrupt
	ClrBit(_UCSRB, 4);  //to enable Rx Circuit
	ClrBit(_UCSRB, 3);  //to enable Tx Circuit
     eec:	52 98       	cbi	0x0a, 2	; 10
     eee:	86 e8       	ldi	r24, 0x86	; 134
     ef0:	80 bd       	out	0x20, r24	; 32
     ef2:	87 e6       	ldi	r24, 0x67	; 103
     ef4:	89 b9       	out	0x09, r24	; 9
     ef6:	10 bc       	out	0x20, r1	; 32
     ef8:	57 9a       	sbi	0x0a, 7	; 10
     efa:	54 9a       	sbi	0x0a, 4	; 10
     efc:	53 9a       	sbi	0x0a, 3	; 10
     efe:	78 94       	sei
     f00:	8f e3       	ldi	r24, 0x3F	; 63
     f02:	9c e9       	ldi	r25, 0x9C	; 156
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <M_Uart_Init+0x18>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <M_Uart_Init+0x1e>
     f0a:	00 00       	nop
     f0c:	08 95       	ret

00000f0e <M_Uart_SetCallBack>:
}

void M_Uart_SetCallBack(void (*Ptr)(void))
{
	Callback = Ptr;
     f0e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <Callback+0x1>
     f12:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Callback>
     f16:	08 95       	ret

00000f18 <__vector_13>:
}

ISR(USART_RXC_vect)
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
	Callback();
     f3a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <Callback>
     f3e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <Callback+0x1>
     f42:	09 95       	icall
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <__subsf3>:
     f66:	50 58       	subi	r21, 0x80	; 128

00000f68 <__addsf3>:
     f68:	bb 27       	eor	r27, r27
     f6a:	aa 27       	eor	r26, r26
     f6c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3x>
     f70:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_round>
     f74:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_pscA>
     f78:	38 f0       	brcs	.+14     	; 0xf88 <__addsf3+0x20>
     f7a:	0e 94 37 09 	call	0x126e	; 0x126e <__fp_pscB>
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__addsf3+0x20>
     f80:	39 f4       	brne	.+14     	; 0xf90 <__addsf3+0x28>
     f82:	9f 3f       	cpi	r25, 0xFF	; 255
     f84:	19 f4       	brne	.+6      	; 0xf8c <__addsf3+0x24>
     f86:	26 f4       	brtc	.+8      	; 0xf90 <__addsf3+0x28>
     f88:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_nan>
     f8c:	0e f4       	brtc	.+2      	; 0xf90 <__addsf3+0x28>
     f8e:	e0 95       	com	r30
     f90:	e7 fb       	bst	r30, 7
     f92:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_inf>

00000f96 <__addsf3x>:
     f96:	e9 2f       	mov	r30, r25
     f98:	0e 94 4f 09 	call	0x129e	; 0x129e <__fp_split3>
     f9c:	58 f3       	brcs	.-42     	; 0xf74 <__addsf3+0xc>
     f9e:	ba 17       	cp	r27, r26
     fa0:	62 07       	cpc	r22, r18
     fa2:	73 07       	cpc	r23, r19
     fa4:	84 07       	cpc	r24, r20
     fa6:	95 07       	cpc	r25, r21
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <__addsf3x+0x1c>
     faa:	79 f4       	brne	.+30     	; 0xfca <__addsf3x+0x34>
     fac:	a6 f5       	brtc	.+104    	; 0x1016 <__addsf3x+0x80>
     fae:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__fp_zero>
     fb2:	0e f4       	brtc	.+2      	; 0xfb6 <__addsf3x+0x20>
     fb4:	e0 95       	com	r30
     fb6:	0b 2e       	mov	r0, r27
     fb8:	ba 2f       	mov	r27, r26
     fba:	a0 2d       	mov	r26, r0
     fbc:	0b 01       	movw	r0, r22
     fbe:	b9 01       	movw	r22, r18
     fc0:	90 01       	movw	r18, r0
     fc2:	0c 01       	movw	r0, r24
     fc4:	ca 01       	movw	r24, r20
     fc6:	a0 01       	movw	r20, r0
     fc8:	11 24       	eor	r1, r1
     fca:	ff 27       	eor	r31, r31
     fcc:	59 1b       	sub	r21, r25
     fce:	99 f0       	breq	.+38     	; 0xff6 <__addsf3x+0x60>
     fd0:	59 3f       	cpi	r21, 0xF9	; 249
     fd2:	50 f4       	brcc	.+20     	; 0xfe8 <__addsf3x+0x52>
     fd4:	50 3e       	cpi	r21, 0xE0	; 224
     fd6:	68 f1       	brcs	.+90     	; 0x1032 <__addsf3x+0x9c>
     fd8:	1a 16       	cp	r1, r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	a2 2f       	mov	r26, r18
     fde:	23 2f       	mov	r18, r19
     fe0:	34 2f       	mov	r19, r20
     fe2:	44 27       	eor	r20, r20
     fe4:	58 5f       	subi	r21, 0xF8	; 248
     fe6:	f3 cf       	rjmp	.-26     	; 0xfce <__addsf3x+0x38>
     fe8:	46 95       	lsr	r20
     fea:	37 95       	ror	r19
     fec:	27 95       	ror	r18
     fee:	a7 95       	ror	r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	53 95       	inc	r21
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__addsf3x+0x52>
     ff6:	7e f4       	brtc	.+30     	; 0x1016 <__addsf3x+0x80>
     ff8:	1f 16       	cp	r1, r31
     ffa:	ba 0b       	sbc	r27, r26
     ffc:	62 0b       	sbc	r22, r18
     ffe:	73 0b       	sbc	r23, r19
    1000:	84 0b       	sbc	r24, r20
    1002:	ba f0       	brmi	.+46     	; 0x1032 <__addsf3x+0x9c>
    1004:	91 50       	subi	r25, 0x01	; 1
    1006:	a1 f0       	breq	.+40     	; 0x1030 <__addsf3x+0x9a>
    1008:	ff 0f       	add	r31, r31
    100a:	bb 1f       	adc	r27, r27
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	c2 f7       	brpl	.-16     	; 0x1004 <__addsf3x+0x6e>
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <__addsf3x+0x9c>
    1016:	ba 0f       	add	r27, r26
    1018:	62 1f       	adc	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	84 1f       	adc	r24, r20
    101e:	48 f4       	brcc	.+18     	; 0x1032 <__addsf3x+0x9c>
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f7 95       	ror	r31
    102a:	9e 3f       	cpi	r25, 0xFE	; 254
    102c:	08 f0       	brcs	.+2      	; 0x1030 <__addsf3x+0x9a>
    102e:	b0 cf       	rjmp	.-160    	; 0xf90 <__addsf3+0x28>
    1030:	93 95       	inc	r25
    1032:	88 0f       	add	r24, r24
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__addsf3x+0xa2>
    1036:	99 27       	eor	r25, r25
    1038:	ee 0f       	add	r30, r30
    103a:	97 95       	ror	r25
    103c:	87 95       	ror	r24
    103e:	08 95       	ret

00001040 <__cmpsf2>:
    1040:	0e 94 03 09 	call	0x1206	; 0x1206 <__fp_cmp>
    1044:	08 f4       	brcc	.+2      	; 0x1048 <__cmpsf2+0x8>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	08 95       	ret

0000104a <__divsf3>:
    104a:	0e 94 39 08 	call	0x1072	; 0x1072 <__divsf3x>
    104e:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_round>
    1052:	0e 94 37 09 	call	0x126e	; 0x126e <__fp_pscB>
    1056:	58 f0       	brcs	.+22     	; 0x106e <__divsf3+0x24>
    1058:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_pscA>
    105c:	40 f0       	brcs	.+16     	; 0x106e <__divsf3+0x24>
    105e:	29 f4       	brne	.+10     	; 0x106a <__divsf3+0x20>
    1060:	5f 3f       	cpi	r21, 0xFF	; 255
    1062:	29 f0       	breq	.+10     	; 0x106e <__divsf3+0x24>
    1064:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_inf>
    1068:	51 11       	cpse	r21, r1
    106a:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__fp_szero>
    106e:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_nan>

00001072 <__divsf3x>:
    1072:	0e 94 4f 09 	call	0x129e	; 0x129e <__fp_split3>
    1076:	68 f3       	brcs	.-38     	; 0x1052 <__divsf3+0x8>

00001078 <__divsf3_pse>:
    1078:	99 23       	and	r25, r25
    107a:	b1 f3       	breq	.-20     	; 0x1068 <__divsf3+0x1e>
    107c:	55 23       	and	r21, r21
    107e:	91 f3       	breq	.-28     	; 0x1064 <__divsf3+0x1a>
    1080:	95 1b       	sub	r25, r21
    1082:	55 0b       	sbc	r21, r21
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	62 17       	cp	r22, r18
    108a:	73 07       	cpc	r23, r19
    108c:	84 07       	cpc	r24, r20
    108e:	38 f0       	brcs	.+14     	; 0x109e <__divsf3_pse+0x26>
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	44 1f       	adc	r20, r20
    109a:	aa 1f       	adc	r26, r26
    109c:	a9 f3       	breq	.-22     	; 0x1088 <__divsf3_pse+0x10>
    109e:	35 d0       	rcall	.+106    	; 0x110a <__divsf3_pse+0x92>
    10a0:	0e 2e       	mov	r0, r30
    10a2:	3a f0       	brmi	.+14     	; 0x10b2 <__divsf3_pse+0x3a>
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	32 d0       	rcall	.+100    	; 0x110c <__divsf3_pse+0x94>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	e6 95       	lsr	r30
    10ae:	00 1c       	adc	r0, r0
    10b0:	ca f7       	brpl	.-14     	; 0x10a4 <__divsf3_pse+0x2c>
    10b2:	2b d0       	rcall	.+86     	; 0x110a <__divsf3_pse+0x92>
    10b4:	fe 2f       	mov	r31, r30
    10b6:	29 d0       	rcall	.+82     	; 0x110a <__divsf3_pse+0x92>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	26 17       	cp	r18, r22
    10c2:	37 07       	cpc	r19, r23
    10c4:	48 07       	cpc	r20, r24
    10c6:	ab 07       	cpc	r26, r27
    10c8:	b0 e8       	ldi	r27, 0x80	; 128
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__divsf3_pse+0x56>
    10cc:	bb 0b       	sbc	r27, r27
    10ce:	80 2d       	mov	r24, r0
    10d0:	bf 01       	movw	r22, r30
    10d2:	ff 27       	eor	r31, r31
    10d4:	93 58       	subi	r25, 0x83	; 131
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	3a f0       	brmi	.+14     	; 0x10e8 <__divsf3_pse+0x70>
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	51 05       	cpc	r21, r1
    10de:	78 f0       	brcs	.+30     	; 0x10fe <__divsf3_pse+0x86>
    10e0:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_inf>
    10e4:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	e4 f3       	brlt	.-8      	; 0x10e4 <__divsf3_pse+0x6c>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	d4 f3       	brlt	.-12     	; 0x10e4 <__divsf3_pse+0x6c>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__divsf3_pse+0x78>
    10fe:	88 0f       	add	r24, r24
    1100:	91 1d       	adc	r25, r1
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret
    110a:	e1 e0       	ldi	r30, 0x01	; 1
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	bb 1f       	adc	r27, r27
    1114:	62 17       	cp	r22, r18
    1116:	73 07       	cpc	r23, r19
    1118:	84 07       	cpc	r24, r20
    111a:	ba 07       	cpc	r27, r26
    111c:	20 f0       	brcs	.+8      	; 0x1126 <__divsf3_pse+0xae>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	84 0b       	sbc	r24, r20
    1124:	ba 0b       	sbc	r27, r26
    1126:	ee 1f       	adc	r30, r30
    1128:	88 f7       	brcc	.-30     	; 0x110c <__divsf3_pse+0x94>
    112a:	e0 95       	com	r30
    112c:	08 95       	ret

0000112e <__fixunssfsi>:
    112e:	0e 94 57 09 	call	0x12ae	; 0x12ae <__fp_splitA>
    1132:	88 f0       	brcs	.+34     	; 0x1156 <__fixunssfsi+0x28>
    1134:	9f 57       	subi	r25, 0x7F	; 127
    1136:	98 f0       	brcs	.+38     	; 0x115e <__fixunssfsi+0x30>
    1138:	b9 2f       	mov	r27, r25
    113a:	99 27       	eor	r25, r25
    113c:	b7 51       	subi	r27, 0x17	; 23
    113e:	b0 f0       	brcs	.+44     	; 0x116c <__fixunssfsi+0x3e>
    1140:	e1 f0       	breq	.+56     	; 0x117a <__fixunssfsi+0x4c>
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	1a f0       	brmi	.+6      	; 0x1152 <__fixunssfsi+0x24>
    114c:	ba 95       	dec	r27
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__fixunssfsi+0x14>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <__fixunssfsi+0x4c>
    1152:	b1 30       	cpi	r27, 0x01	; 1
    1154:	91 f0       	breq	.+36     	; 0x117a <__fixunssfsi+0x4c>
    1156:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_zero>
    115a:	b1 e0       	ldi	r27, 0x01	; 1
    115c:	08 95       	ret
    115e:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__fp_zero>
    1162:	67 2f       	mov	r22, r23
    1164:	78 2f       	mov	r23, r24
    1166:	88 27       	eor	r24, r24
    1168:	b8 5f       	subi	r27, 0xF8	; 248
    116a:	39 f0       	breq	.+14     	; 0x117a <__fixunssfsi+0x4c>
    116c:	b9 3f       	cpi	r27, 0xF9	; 249
    116e:	cc f3       	brlt	.-14     	; 0x1162 <__fixunssfsi+0x34>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b3 95       	inc	r27
    1178:	d9 f7       	brne	.-10     	; 0x1170 <__fixunssfsi+0x42>
    117a:	3e f4       	brtc	.+14     	; 0x118a <__fixunssfsi+0x5c>
    117c:	90 95       	com	r25
    117e:	80 95       	com	r24
    1180:	70 95       	com	r23
    1182:	61 95       	neg	r22
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <__floatunsisf>:
    118c:	e8 94       	clt
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <__floatsisf+0x12>

00001190 <__floatsisf>:
    1190:	97 fb       	bst	r25, 7
    1192:	3e f4       	brtc	.+14     	; 0x11a2 <__floatsisf+0x12>
    1194:	90 95       	com	r25
    1196:	80 95       	com	r24
    1198:	70 95       	com	r23
    119a:	61 95       	neg	r22
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	99 23       	and	r25, r25
    11a4:	a9 f0       	breq	.+42     	; 0x11d0 <__floatsisf+0x40>
    11a6:	f9 2f       	mov	r31, r25
    11a8:	96 e9       	ldi	r25, 0x96	; 150
    11aa:	bb 27       	eor	r27, r27
    11ac:	93 95       	inc	r25
    11ae:	f6 95       	lsr	r31
    11b0:	87 95       	ror	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	b7 95       	ror	r27
    11b8:	f1 11       	cpse	r31, r1
    11ba:	f8 cf       	rjmp	.-16     	; 0x11ac <__floatsisf+0x1c>
    11bc:	fa f4       	brpl	.+62     	; 0x11fc <__floatsisf+0x6c>
    11be:	bb 0f       	add	r27, r27
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__floatsisf+0x36>
    11c2:	60 ff       	sbrs	r22, 0
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <__floatsisf+0x6c>
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	16 c0       	rjmp	.+44     	; 0x11fc <__floatsisf+0x6c>
    11d0:	88 23       	and	r24, r24
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <__floatsisf+0x48>
    11d4:	96 e9       	ldi	r25, 0x96	; 150
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <__floatsisf+0x6a>
    11d8:	77 23       	and	r23, r23
    11da:	21 f0       	breq	.+8      	; 0x11e4 <__floatsisf+0x54>
    11dc:	9e e8       	ldi	r25, 0x8E	; 142
    11de:	87 2f       	mov	r24, r23
    11e0:	76 2f       	mov	r23, r22
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <__floatsisf+0x5e>
    11e4:	66 23       	and	r22, r22
    11e6:	71 f0       	breq	.+28     	; 0x1204 <__floatsisf+0x74>
    11e8:	96 e8       	ldi	r25, 0x86	; 134
    11ea:	86 2f       	mov	r24, r22
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	2a f0       	brmi	.+10     	; 0x11fc <__floatsisf+0x6c>
    11f2:	9a 95       	dec	r25
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	da f7       	brpl	.-10     	; 0x11f2 <__floatsisf+0x62>
    11fc:	88 0f       	add	r24, r24
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	97 f9       	bld	r25, 7
    1204:	08 95       	ret

00001206 <__fp_cmp>:
    1206:	99 0f       	add	r25, r25
    1208:	00 08       	sbc	r0, r0
    120a:	55 0f       	add	r21, r21
    120c:	aa 0b       	sbc	r26, r26
    120e:	e0 e8       	ldi	r30, 0x80	; 128
    1210:	fe ef       	ldi	r31, 0xFE	; 254
    1212:	16 16       	cp	r1, r22
    1214:	17 06       	cpc	r1, r23
    1216:	e8 07       	cpc	r30, r24
    1218:	f9 07       	cpc	r31, r25
    121a:	c0 f0       	brcs	.+48     	; 0x124c <__fp_cmp+0x46>
    121c:	12 16       	cp	r1, r18
    121e:	13 06       	cpc	r1, r19
    1220:	e4 07       	cpc	r30, r20
    1222:	f5 07       	cpc	r31, r21
    1224:	98 f0       	brcs	.+38     	; 0x124c <__fp_cmp+0x46>
    1226:	62 1b       	sub	r22, r18
    1228:	73 0b       	sbc	r23, r19
    122a:	84 0b       	sbc	r24, r20
    122c:	95 0b       	sbc	r25, r21
    122e:	39 f4       	brne	.+14     	; 0x123e <__fp_cmp+0x38>
    1230:	0a 26       	eor	r0, r26
    1232:	61 f0       	breq	.+24     	; 0x124c <__fp_cmp+0x46>
    1234:	23 2b       	or	r18, r19
    1236:	24 2b       	or	r18, r20
    1238:	25 2b       	or	r18, r21
    123a:	21 f4       	brne	.+8      	; 0x1244 <__fp_cmp+0x3e>
    123c:	08 95       	ret
    123e:	0a 26       	eor	r0, r26
    1240:	09 f4       	brne	.+2      	; 0x1244 <__fp_cmp+0x3e>
    1242:	a1 40       	sbci	r26, 0x01	; 1
    1244:	a6 95       	lsr	r26
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	81 1d       	adc	r24, r1
    124a:	81 1d       	adc	r24, r1
    124c:	08 95       	ret

0000124e <__fp_inf>:
    124e:	97 f9       	bld	r25, 7
    1250:	9f 67       	ori	r25, 0x7F	; 127
    1252:	80 e8       	ldi	r24, 0x80	; 128
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	08 95       	ret

0000125a <__fp_nan>:
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	80 ec       	ldi	r24, 0xC0	; 192
    125e:	08 95       	ret

00001260 <__fp_pscA>:
    1260:	00 24       	eor	r0, r0
    1262:	0a 94       	dec	r0
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	18 06       	cpc	r1, r24
    126a:	09 06       	cpc	r0, r25
    126c:	08 95       	ret

0000126e <__fp_pscB>:
    126e:	00 24       	eor	r0, r0
    1270:	0a 94       	dec	r0
    1272:	12 16       	cp	r1, r18
    1274:	13 06       	cpc	r1, r19
    1276:	14 06       	cpc	r1, r20
    1278:	05 06       	cpc	r0, r21
    127a:	08 95       	ret

0000127c <__fp_round>:
    127c:	09 2e       	mov	r0, r25
    127e:	03 94       	inc	r0
    1280:	00 0c       	add	r0, r0
    1282:	11 f4       	brne	.+4      	; 0x1288 <__fp_round+0xc>
    1284:	88 23       	and	r24, r24
    1286:	52 f0       	brmi	.+20     	; 0x129c <__fp_round+0x20>
    1288:	bb 0f       	add	r27, r27
    128a:	40 f4       	brcc	.+16     	; 0x129c <__fp_round+0x20>
    128c:	bf 2b       	or	r27, r31
    128e:	11 f4       	brne	.+4      	; 0x1294 <__fp_round+0x18>
    1290:	60 ff       	sbrs	r22, 0
    1292:	04 c0       	rjmp	.+8      	; 0x129c <__fp_round+0x20>
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__fp_split3>:
    129e:	57 fd       	sbrc	r21, 7
    12a0:	90 58       	subi	r25, 0x80	; 128
    12a2:	44 0f       	add	r20, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	59 f0       	breq	.+22     	; 0x12be <__fp_splitA+0x10>
    12a8:	5f 3f       	cpi	r21, 0xFF	; 255
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__fp_splitA+0x1a>
    12ac:	47 95       	ror	r20

000012ae <__fp_splitA>:
    12ae:	88 0f       	add	r24, r24
    12b0:	97 fb       	bst	r25, 7
    12b2:	99 1f       	adc	r25, r25
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_splitA+0x20>
    12b6:	9f 3f       	cpi	r25, 0xFF	; 255
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <__fp_splitA+0x2a>
    12ba:	87 95       	ror	r24
    12bc:	08 95       	ret
    12be:	12 16       	cp	r1, r18
    12c0:	13 06       	cpc	r1, r19
    12c2:	14 06       	cpc	r1, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	f2 cf       	rjmp	.-28     	; 0x12ac <__fp_split3+0xe>
    12c8:	46 95       	lsr	r20
    12ca:	f1 df       	rcall	.-30     	; 0x12ae <__fp_splitA>
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <__fp_splitA+0x30>
    12ce:	16 16       	cp	r1, r22
    12d0:	17 06       	cpc	r1, r23
    12d2:	18 06       	cpc	r1, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	f1 cf       	rjmp	.-30     	; 0x12ba <__fp_splitA+0xc>
    12d8:	86 95       	lsr	r24
    12da:	71 05       	cpc	r23, r1
    12dc:	61 05       	cpc	r22, r1
    12de:	08 94       	sec
    12e0:	08 95       	ret

000012e2 <__fp_zero>:
    12e2:	e8 94       	clt

000012e4 <__fp_szero>:
    12e4:	bb 27       	eor	r27, r27
    12e6:	66 27       	eor	r22, r22
    12e8:	77 27       	eor	r23, r23
    12ea:	cb 01       	movw	r24, r22
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__mulsf3>:
    12f0:	0e 94 8b 09 	call	0x1316	; 0x1316 <__mulsf3x>
    12f4:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_round>
    12f8:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_pscA>
    12fc:	38 f0       	brcs	.+14     	; 0x130c <__mulsf3+0x1c>
    12fe:	0e 94 37 09 	call	0x126e	; 0x126e <__fp_pscB>
    1302:	20 f0       	brcs	.+8      	; 0x130c <__mulsf3+0x1c>
    1304:	95 23       	and	r25, r21
    1306:	11 f0       	breq	.+4      	; 0x130c <__mulsf3+0x1c>
    1308:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_inf>
    130c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_nan>
    1310:	11 24       	eor	r1, r1
    1312:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__fp_szero>

00001316 <__mulsf3x>:
    1316:	0e 94 4f 09 	call	0x129e	; 0x129e <__fp_split3>
    131a:	70 f3       	brcs	.-36     	; 0x12f8 <__mulsf3+0x8>

0000131c <__mulsf3_pse>:
    131c:	95 9f       	mul	r25, r21
    131e:	c1 f3       	breq	.-16     	; 0x1310 <__mulsf3+0x20>
    1320:	95 0f       	add	r25, r21
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	55 1f       	adc	r21, r21
    1326:	62 9f       	mul	r22, r18
    1328:	f0 01       	movw	r30, r0
    132a:	72 9f       	mul	r23, r18
    132c:	bb 27       	eor	r27, r27
    132e:	f0 0d       	add	r31, r0
    1330:	b1 1d       	adc	r27, r1
    1332:	63 9f       	mul	r22, r19
    1334:	aa 27       	eor	r26, r26
    1336:	f0 0d       	add	r31, r0
    1338:	b1 1d       	adc	r27, r1
    133a:	aa 1f       	adc	r26, r26
    133c:	64 9f       	mul	r22, r20
    133e:	66 27       	eor	r22, r22
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	66 1f       	adc	r22, r22
    1346:	82 9f       	mul	r24, r18
    1348:	22 27       	eor	r18, r18
    134a:	b0 0d       	add	r27, r0
    134c:	a1 1d       	adc	r26, r1
    134e:	62 1f       	adc	r22, r18
    1350:	73 9f       	mul	r23, r19
    1352:	b0 0d       	add	r27, r0
    1354:	a1 1d       	adc	r26, r1
    1356:	62 1f       	adc	r22, r18
    1358:	83 9f       	mul	r24, r19
    135a:	a0 0d       	add	r26, r0
    135c:	61 1d       	adc	r22, r1
    135e:	22 1f       	adc	r18, r18
    1360:	74 9f       	mul	r23, r20
    1362:	33 27       	eor	r19, r19
    1364:	a0 0d       	add	r26, r0
    1366:	61 1d       	adc	r22, r1
    1368:	23 1f       	adc	r18, r19
    136a:	84 9f       	mul	r24, r20
    136c:	60 0d       	add	r22, r0
    136e:	21 1d       	adc	r18, r1
    1370:	82 2f       	mov	r24, r18
    1372:	76 2f       	mov	r23, r22
    1374:	6a 2f       	mov	r22, r26
    1376:	11 24       	eor	r1, r1
    1378:	9f 57       	subi	r25, 0x7F	; 127
    137a:	50 40       	sbci	r21, 0x00	; 0
    137c:	9a f0       	brmi	.+38     	; 0x13a4 <__mulsf3_pse+0x88>
    137e:	f1 f0       	breq	.+60     	; 0x13bc <__mulsf3_pse+0xa0>
    1380:	88 23       	and	r24, r24
    1382:	4a f0       	brmi	.+18     	; 0x1396 <__mulsf3_pse+0x7a>
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	bb 1f       	adc	r27, r27
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	91 50       	subi	r25, 0x01	; 1
    1392:	50 40       	sbci	r21, 0x00	; 0
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__mulsf3_pse+0x64>
    1396:	9e 3f       	cpi	r25, 0xFE	; 254
    1398:	51 05       	cpc	r21, r1
    139a:	80 f0       	brcs	.+32     	; 0x13bc <__mulsf3_pse+0xa0>
    139c:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_inf>
    13a0:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__fp_szero>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	e4 f3       	brlt	.-8      	; 0x13a0 <__mulsf3_pse+0x84>
    13a8:	98 3e       	cpi	r25, 0xE8	; 232
    13aa:	d4 f3       	brlt	.-12     	; 0x13a0 <__mulsf3_pse+0x84>
    13ac:	86 95       	lsr	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	b7 95       	ror	r27
    13b4:	f7 95       	ror	r31
    13b6:	e7 95       	ror	r30
    13b8:	9f 5f       	subi	r25, 0xFF	; 255
    13ba:	c1 f7       	brne	.-16     	; 0x13ac <__mulsf3_pse+0x90>
    13bc:	fe 2b       	or	r31, r30
    13be:	88 0f       	add	r24, r24
    13c0:	91 1d       	adc	r25, r1
    13c2:	96 95       	lsr	r25
    13c4:	87 95       	ror	r24
    13c6:	97 f9       	bld	r25, 7
    13c8:	08 95       	ret

000013ca <__udivmodsi4>:
    13ca:	a1 e2       	ldi	r26, 0x21	; 33
    13cc:	1a 2e       	mov	r1, r26
    13ce:	aa 1b       	sub	r26, r26
    13d0:	bb 1b       	sub	r27, r27
    13d2:	fd 01       	movw	r30, r26
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <__udivmodsi4_ep>

000013d6 <__udivmodsi4_loop>:
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	ee 1f       	adc	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	a2 17       	cp	r26, r18
    13e0:	b3 07       	cpc	r27, r19
    13e2:	e4 07       	cpc	r30, r20
    13e4:	f5 07       	cpc	r31, r21
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__udivmodsi4_ep>
    13e8:	a2 1b       	sub	r26, r18
    13ea:	b3 0b       	sbc	r27, r19
    13ec:	e4 0b       	sbc	r30, r20
    13ee:	f5 0b       	sbc	r31, r21

000013f0 <__udivmodsi4_ep>:
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	1a 94       	dec	r1
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__udivmodsi4_loop>
    13fc:	60 95       	com	r22
    13fe:	70 95       	com	r23
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	bd 01       	movw	r22, r26
    140a:	cf 01       	movw	r24, r30
    140c:	08 95       	ret

0000140e <atoi>:
    140e:	fc 01       	movw	r30, r24
    1410:	88 27       	eor	r24, r24
    1412:	99 27       	eor	r25, r25
    1414:	e8 94       	clt
    1416:	21 91       	ld	r18, Z+
    1418:	20 32       	cpi	r18, 0x20	; 32
    141a:	e9 f3       	breq	.-6      	; 0x1416 <atoi+0x8>
    141c:	29 30       	cpi	r18, 0x09	; 9
    141e:	10 f0       	brcs	.+4      	; 0x1424 <atoi+0x16>
    1420:	2e 30       	cpi	r18, 0x0E	; 14
    1422:	c8 f3       	brcs	.-14     	; 0x1416 <atoi+0x8>
    1424:	2b 32       	cpi	r18, 0x2B	; 43
    1426:	41 f0       	breq	.+16     	; 0x1438 <atoi+0x2a>
    1428:	2d 32       	cpi	r18, 0x2D	; 45
    142a:	39 f4       	brne	.+14     	; 0x143a <atoi+0x2c>
    142c:	68 94       	set
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <atoi+0x2a>
    1430:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulhi_const_10>
    1434:	82 0f       	add	r24, r18
    1436:	91 1d       	adc	r25, r1
    1438:	21 91       	ld	r18, Z+
    143a:	20 53       	subi	r18, 0x30	; 48
    143c:	2a 30       	cpi	r18, 0x0A	; 10
    143e:	c0 f3       	brcs	.-16     	; 0x1430 <atoi+0x22>
    1440:	1e f4       	brtc	.+6      	; 0x1448 <atoi+0x3a>
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <strcat>:
    144a:	fb 01       	movw	r30, r22
    144c:	dc 01       	movw	r26, r24
    144e:	0d 90       	ld	r0, X+
    1450:	00 20       	and	r0, r0
    1452:	e9 f7       	brne	.-6      	; 0x144e <strcat+0x4>
    1454:	11 97       	sbiw	r26, 0x01	; 1
    1456:	01 90       	ld	r0, Z+
    1458:	0d 92       	st	X+, r0
    145a:	00 20       	and	r0, r0
    145c:	e1 f7       	brne	.-8      	; 0x1456 <strcat+0xc>
    145e:	08 95       	ret

00001460 <strcmp>:
    1460:	fb 01       	movw	r30, r22
    1462:	dc 01       	movw	r26, r24
    1464:	8d 91       	ld	r24, X+
    1466:	01 90       	ld	r0, Z+
    1468:	80 19       	sub	r24, r0
    146a:	01 10       	cpse	r0, r1
    146c:	d9 f3       	breq	.-10     	; 0x1464 <strcmp+0x4>
    146e:	99 0b       	sbc	r25, r25
    1470:	08 95       	ret

00001472 <strncpy>:
    1472:	fb 01       	movw	r30, r22
    1474:	dc 01       	movw	r26, r24
    1476:	41 50       	subi	r20, 0x01	; 1
    1478:	50 40       	sbci	r21, 0x00	; 0
    147a:	48 f0       	brcs	.+18     	; 0x148e <strncpy+0x1c>
    147c:	01 90       	ld	r0, Z+
    147e:	0d 92       	st	X+, r0
    1480:	00 20       	and	r0, r0
    1482:	c9 f7       	brne	.-14     	; 0x1476 <strncpy+0x4>
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <strncpy+0x16>
    1486:	1d 92       	st	X+, r1
    1488:	41 50       	subi	r20, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	e0 f7       	brcc	.-8      	; 0x1486 <strncpy+0x14>
    148e:	08 95       	ret

00001490 <__mulhi_const_10>:
    1490:	7a e0       	ldi	r23, 0x0A	; 10
    1492:	97 9f       	mul	r25, r23
    1494:	90 2d       	mov	r25, r0
    1496:	87 9f       	mul	r24, r23
    1498:	80 2d       	mov	r24, r0
    149a:	91 0d       	add	r25, r1
    149c:	11 24       	eor	r1, r1
    149e:	08 95       	ret

000014a0 <sprintf>:
    14a0:	ae e0       	ldi	r26, 0x0E	; 14
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e6 e5       	ldi	r30, 0x56	; 86
    14a6:	fa e0       	ldi	r31, 0x0A	; 10
    14a8:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x1c>
    14ac:	0d 89       	ldd	r16, Y+21	; 0x15
    14ae:	1e 89       	ldd	r17, Y+22	; 0x16
    14b0:	86 e0       	ldi	r24, 0x06	; 6
    14b2:	8c 83       	std	Y+4, r24	; 0x04
    14b4:	1a 83       	std	Y+2, r17	; 0x02
    14b6:	09 83       	std	Y+1, r16	; 0x01
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	9f e7       	ldi	r25, 0x7F	; 127
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	ae 01       	movw	r20, r28
    14c2:	47 5e       	subi	r20, 0xE7	; 231
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	6f 89       	ldd	r22, Y+23	; 0x17
    14c8:	78 8d       	ldd	r23, Y+24	; 0x18
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <vfprintf>
    14d2:	ef 81       	ldd	r30, Y+7	; 0x07
    14d4:	f8 85       	ldd	r31, Y+8	; 0x08
    14d6:	e0 0f       	add	r30, r16
    14d8:	f1 1f       	adc	r31, r17
    14da:	10 82       	st	Z, r1
    14dc:	2e 96       	adiw	r28, 0x0e	; 14
    14de:	e4 e0       	ldi	r30, 0x04	; 4
    14e0:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x1c>

000014e4 <vfprintf>:
    14e4:	ab e0       	ldi	r26, 0x0B	; 11
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e7       	ldi	r30, 0x78	; 120
    14ea:	fa e0       	ldi	r31, 0x0A	; 10
    14ec:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__prologue_saves__>
    14f0:	6c 01       	movw	r12, r24
    14f2:	7b 01       	movw	r14, r22
    14f4:	8a 01       	movw	r16, r20
    14f6:	fc 01       	movw	r30, r24
    14f8:	17 82       	std	Z+7, r1	; 0x07
    14fa:	16 82       	std	Z+6, r1	; 0x06
    14fc:	83 81       	ldd	r24, Z+3	; 0x03
    14fe:	81 ff       	sbrs	r24, 1
    1500:	cc c1       	rjmp	.+920    	; 0x189a <vfprintf+0x3b6>
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	3c 01       	movw	r6, r24
    1508:	f6 01       	movw	r30, r12
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	f7 01       	movw	r30, r14
    150e:	93 fd       	sbrc	r25, 3
    1510:	85 91       	lpm	r24, Z+
    1512:	93 ff       	sbrs	r25, 3
    1514:	81 91       	ld	r24, Z+
    1516:	7f 01       	movw	r14, r30
    1518:	88 23       	and	r24, r24
    151a:	09 f4       	brne	.+2      	; 0x151e <vfprintf+0x3a>
    151c:	ba c1       	rjmp	.+884    	; 0x1892 <vfprintf+0x3ae>
    151e:	85 32       	cpi	r24, 0x25	; 37
    1520:	39 f4       	brne	.+14     	; 0x1530 <vfprintf+0x4c>
    1522:	93 fd       	sbrc	r25, 3
    1524:	85 91       	lpm	r24, Z+
    1526:	93 ff       	sbrs	r25, 3
    1528:	81 91       	ld	r24, Z+
    152a:	7f 01       	movw	r14, r30
    152c:	85 32       	cpi	r24, 0x25	; 37
    152e:	29 f4       	brne	.+10     	; 0x153a <vfprintf+0x56>
    1530:	b6 01       	movw	r22, r12
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1538:	e7 cf       	rjmp	.-50     	; 0x1508 <vfprintf+0x24>
    153a:	91 2c       	mov	r9, r1
    153c:	21 2c       	mov	r2, r1
    153e:	31 2c       	mov	r3, r1
    1540:	ff e1       	ldi	r31, 0x1F	; 31
    1542:	f3 15       	cp	r31, r3
    1544:	d8 f0       	brcs	.+54     	; 0x157c <vfprintf+0x98>
    1546:	8b 32       	cpi	r24, 0x2B	; 43
    1548:	79 f0       	breq	.+30     	; 0x1568 <vfprintf+0x84>
    154a:	38 f4       	brcc	.+14     	; 0x155a <vfprintf+0x76>
    154c:	80 32       	cpi	r24, 0x20	; 32
    154e:	79 f0       	breq	.+30     	; 0x156e <vfprintf+0x8a>
    1550:	83 32       	cpi	r24, 0x23	; 35
    1552:	a1 f4       	brne	.+40     	; 0x157c <vfprintf+0x98>
    1554:	23 2d       	mov	r18, r3
    1556:	20 61       	ori	r18, 0x10	; 16
    1558:	1d c0       	rjmp	.+58     	; 0x1594 <vfprintf+0xb0>
    155a:	8d 32       	cpi	r24, 0x2D	; 45
    155c:	61 f0       	breq	.+24     	; 0x1576 <vfprintf+0x92>
    155e:	80 33       	cpi	r24, 0x30	; 48
    1560:	69 f4       	brne	.+26     	; 0x157c <vfprintf+0x98>
    1562:	23 2d       	mov	r18, r3
    1564:	21 60       	ori	r18, 0x01	; 1
    1566:	16 c0       	rjmp	.+44     	; 0x1594 <vfprintf+0xb0>
    1568:	83 2d       	mov	r24, r3
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	38 2e       	mov	r3, r24
    156e:	e3 2d       	mov	r30, r3
    1570:	e4 60       	ori	r30, 0x04	; 4
    1572:	3e 2e       	mov	r3, r30
    1574:	2a c0       	rjmp	.+84     	; 0x15ca <vfprintf+0xe6>
    1576:	f3 2d       	mov	r31, r3
    1578:	f8 60       	ori	r31, 0x08	; 8
    157a:	1d c0       	rjmp	.+58     	; 0x15b6 <vfprintf+0xd2>
    157c:	37 fc       	sbrc	r3, 7
    157e:	2d c0       	rjmp	.+90     	; 0x15da <vfprintf+0xf6>
    1580:	20 ed       	ldi	r18, 0xD0	; 208
    1582:	28 0f       	add	r18, r24
    1584:	2a 30       	cpi	r18, 0x0A	; 10
    1586:	40 f0       	brcs	.+16     	; 0x1598 <vfprintf+0xb4>
    1588:	8e 32       	cpi	r24, 0x2E	; 46
    158a:	b9 f4       	brne	.+46     	; 0x15ba <vfprintf+0xd6>
    158c:	36 fc       	sbrc	r3, 6
    158e:	81 c1       	rjmp	.+770    	; 0x1892 <vfprintf+0x3ae>
    1590:	23 2d       	mov	r18, r3
    1592:	20 64       	ori	r18, 0x40	; 64
    1594:	32 2e       	mov	r3, r18
    1596:	19 c0       	rjmp	.+50     	; 0x15ca <vfprintf+0xe6>
    1598:	36 fe       	sbrs	r3, 6
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <vfprintf+0xc4>
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	98 9e       	mul	r9, r24
    15a0:	20 0d       	add	r18, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	92 2e       	mov	r9, r18
    15a6:	11 c0       	rjmp	.+34     	; 0x15ca <vfprintf+0xe6>
    15a8:	ea e0       	ldi	r30, 0x0A	; 10
    15aa:	2e 9e       	mul	r2, r30
    15ac:	20 0d       	add	r18, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	22 2e       	mov	r2, r18
    15b2:	f3 2d       	mov	r31, r3
    15b4:	f0 62       	ori	r31, 0x20	; 32
    15b6:	3f 2e       	mov	r3, r31
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0xe6>
    15ba:	8c 36       	cpi	r24, 0x6C	; 108
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <vfprintf+0xe2>
    15be:	83 2d       	mov	r24, r3
    15c0:	80 68       	ori	r24, 0x80	; 128
    15c2:	38 2e       	mov	r3, r24
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <vfprintf+0xe6>
    15c6:	88 36       	cpi	r24, 0x68	; 104
    15c8:	41 f4       	brne	.+16     	; 0x15da <vfprintf+0xf6>
    15ca:	f7 01       	movw	r30, r14
    15cc:	93 fd       	sbrc	r25, 3
    15ce:	85 91       	lpm	r24, Z+
    15d0:	93 ff       	sbrs	r25, 3
    15d2:	81 91       	ld	r24, Z+
    15d4:	7f 01       	movw	r14, r30
    15d6:	81 11       	cpse	r24, r1
    15d8:	b3 cf       	rjmp	.-154    	; 0x1540 <vfprintf+0x5c>
    15da:	98 2f       	mov	r25, r24
    15dc:	9f 7d       	andi	r25, 0xDF	; 223
    15de:	95 54       	subi	r25, 0x45	; 69
    15e0:	93 30       	cpi	r25, 0x03	; 3
    15e2:	28 f4       	brcc	.+10     	; 0x15ee <vfprintf+0x10a>
    15e4:	0c 5f       	subi	r16, 0xFC	; 252
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	9f e3       	ldi	r25, 0x3F	; 63
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <vfprintf+0x124>
    15ee:	83 36       	cpi	r24, 0x63	; 99
    15f0:	31 f0       	breq	.+12     	; 0x15fe <vfprintf+0x11a>
    15f2:	83 37       	cpi	r24, 0x73	; 115
    15f4:	71 f0       	breq	.+28     	; 0x1612 <vfprintf+0x12e>
    15f6:	83 35       	cpi	r24, 0x53	; 83
    15f8:	09 f0       	breq	.+2      	; 0x15fc <vfprintf+0x118>
    15fa:	59 c0       	rjmp	.+178    	; 0x16ae <vfprintf+0x1ca>
    15fc:	21 c0       	rjmp	.+66     	; 0x1640 <vfprintf+0x15c>
    15fe:	f8 01       	movw	r30, r16
    1600:	80 81       	ld	r24, Z
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	0e 5f       	subi	r16, 0xFE	; 254
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	88 24       	eor	r8, r8
    160a:	83 94       	inc	r8
    160c:	91 2c       	mov	r9, r1
    160e:	53 01       	movw	r10, r6
    1610:	13 c0       	rjmp	.+38     	; 0x1638 <vfprintf+0x154>
    1612:	28 01       	movw	r4, r16
    1614:	f2 e0       	ldi	r31, 0x02	; 2
    1616:	4f 0e       	add	r4, r31
    1618:	51 1c       	adc	r5, r1
    161a:	f8 01       	movw	r30, r16
    161c:	a0 80       	ld	r10, Z
    161e:	b1 80       	ldd	r11, Z+1	; 0x01
    1620:	36 fe       	sbrs	r3, 6
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x146>
    1624:	69 2d       	mov	r22, r9
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0x14a>
    162a:	6f ef       	ldi	r22, 0xFF	; 255
    162c:	7f ef       	ldi	r23, 0xFF	; 255
    162e:	c5 01       	movw	r24, r10
    1630:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <strnlen>
    1634:	4c 01       	movw	r8, r24
    1636:	82 01       	movw	r16, r4
    1638:	f3 2d       	mov	r31, r3
    163a:	ff 77       	andi	r31, 0x7F	; 127
    163c:	3f 2e       	mov	r3, r31
    163e:	16 c0       	rjmp	.+44     	; 0x166c <vfprintf+0x188>
    1640:	28 01       	movw	r4, r16
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	42 0e       	add	r4, r18
    1646:	51 1c       	adc	r5, r1
    1648:	f8 01       	movw	r30, r16
    164a:	a0 80       	ld	r10, Z
    164c:	b1 80       	ldd	r11, Z+1	; 0x01
    164e:	36 fe       	sbrs	r3, 6
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <vfprintf+0x174>
    1652:	69 2d       	mov	r22, r9
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <vfprintf+0x178>
    1658:	6f ef       	ldi	r22, 0xFF	; 255
    165a:	7f ef       	ldi	r23, 0xFF	; 255
    165c:	c5 01       	movw	r24, r10
    165e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <strnlen_P>
    1662:	4c 01       	movw	r8, r24
    1664:	f3 2d       	mov	r31, r3
    1666:	f0 68       	ori	r31, 0x80	; 128
    1668:	3f 2e       	mov	r3, r31
    166a:	82 01       	movw	r16, r4
    166c:	33 fc       	sbrc	r3, 3
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <vfprintf+0x1c2>
    1670:	82 2d       	mov	r24, r2
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	88 16       	cp	r8, r24
    1676:	99 06       	cpc	r9, r25
    1678:	b0 f4       	brcc	.+44     	; 0x16a6 <vfprintf+0x1c2>
    167a:	b6 01       	movw	r22, r12
    167c:	80 e2       	ldi	r24, 0x20	; 32
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1684:	2a 94       	dec	r2
    1686:	f4 cf       	rjmp	.-24     	; 0x1670 <vfprintf+0x18c>
    1688:	f5 01       	movw	r30, r10
    168a:	37 fc       	sbrc	r3, 7
    168c:	85 91       	lpm	r24, Z+
    168e:	37 fe       	sbrs	r3, 7
    1690:	81 91       	ld	r24, Z+
    1692:	5f 01       	movw	r10, r30
    1694:	b6 01       	movw	r22, r12
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    169c:	21 10       	cpse	r2, r1
    169e:	2a 94       	dec	r2
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	82 1a       	sub	r8, r18
    16a4:	91 08       	sbc	r9, r1
    16a6:	81 14       	cp	r8, r1
    16a8:	91 04       	cpc	r9, r1
    16aa:	71 f7       	brne	.-36     	; 0x1688 <vfprintf+0x1a4>
    16ac:	e8 c0       	rjmp	.+464    	; 0x187e <vfprintf+0x39a>
    16ae:	84 36       	cpi	r24, 0x64	; 100
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <vfprintf+0x1d2>
    16b2:	89 36       	cpi	r24, 0x69	; 105
    16b4:	41 f5       	brne	.+80     	; 0x1706 <vfprintf+0x222>
    16b6:	f8 01       	movw	r30, r16
    16b8:	37 fe       	sbrs	r3, 7
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <vfprintf+0x1e6>
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	0c 5f       	subi	r16, 0xFC	; 252
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <vfprintf+0x1f6>
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	07 2e       	mov	r0, r23
    16d0:	00 0c       	add	r0, r0
    16d2:	88 0b       	sbc	r24, r24
    16d4:	99 0b       	sbc	r25, r25
    16d6:	0e 5f       	subi	r16, 0xFE	; 254
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	f3 2d       	mov	r31, r3
    16dc:	ff 76       	andi	r31, 0x6F	; 111
    16de:	3f 2e       	mov	r3, r31
    16e0:	97 ff       	sbrs	r25, 7
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <vfprintf+0x212>
    16e4:	90 95       	com	r25
    16e6:	80 95       	com	r24
    16e8:	70 95       	com	r23
    16ea:	61 95       	neg	r22
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	f0 68       	ori	r31, 0x80	; 128
    16f4:	3f 2e       	mov	r3, r31
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	a3 01       	movw	r20, r6
    16fc:	0e 94 a5 0c 	call	0x194a	; 0x194a <__ultoa_invert>
    1700:	88 2e       	mov	r8, r24
    1702:	86 18       	sub	r8, r6
    1704:	45 c0       	rjmp	.+138    	; 0x1790 <vfprintf+0x2ac>
    1706:	85 37       	cpi	r24, 0x75	; 117
    1708:	31 f4       	brne	.+12     	; 0x1716 <vfprintf+0x232>
    170a:	23 2d       	mov	r18, r3
    170c:	2f 7e       	andi	r18, 0xEF	; 239
    170e:	b2 2e       	mov	r11, r18
    1710:	2a e0       	ldi	r18, 0x0A	; 10
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	25 c0       	rjmp	.+74     	; 0x1760 <vfprintf+0x27c>
    1716:	93 2d       	mov	r25, r3
    1718:	99 7f       	andi	r25, 0xF9	; 249
    171a:	b9 2e       	mov	r11, r25
    171c:	8f 36       	cpi	r24, 0x6F	; 111
    171e:	c1 f0       	breq	.+48     	; 0x1750 <vfprintf+0x26c>
    1720:	18 f4       	brcc	.+6      	; 0x1728 <vfprintf+0x244>
    1722:	88 35       	cpi	r24, 0x58	; 88
    1724:	79 f0       	breq	.+30     	; 0x1744 <vfprintf+0x260>
    1726:	b5 c0       	rjmp	.+362    	; 0x1892 <vfprintf+0x3ae>
    1728:	80 37       	cpi	r24, 0x70	; 112
    172a:	19 f0       	breq	.+6      	; 0x1732 <vfprintf+0x24e>
    172c:	88 37       	cpi	r24, 0x78	; 120
    172e:	21 f0       	breq	.+8      	; 0x1738 <vfprintf+0x254>
    1730:	b0 c0       	rjmp	.+352    	; 0x1892 <vfprintf+0x3ae>
    1732:	e9 2f       	mov	r30, r25
    1734:	e0 61       	ori	r30, 0x10	; 16
    1736:	be 2e       	mov	r11, r30
    1738:	b4 fe       	sbrs	r11, 4
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x272>
    173c:	fb 2d       	mov	r31, r11
    173e:	f4 60       	ori	r31, 0x04	; 4
    1740:	bf 2e       	mov	r11, r31
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <vfprintf+0x272>
    1744:	34 fe       	sbrs	r3, 4
    1746:	0a c0       	rjmp	.+20     	; 0x175c <vfprintf+0x278>
    1748:	29 2f       	mov	r18, r25
    174a:	26 60       	ori	r18, 0x06	; 6
    174c:	b2 2e       	mov	r11, r18
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x278>
    1750:	28 e0       	ldi	r18, 0x08	; 8
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x27c>
    1756:	20 e1       	ldi	r18, 0x10	; 16
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x27c>
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	32 e0       	ldi	r19, 0x02	; 2
    1760:	f8 01       	movw	r30, r16
    1762:	b7 fe       	sbrs	r11, 7
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <vfprintf+0x290>
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0c 5f       	subi	r16, 0xFC	; 252
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <vfprintf+0x29c>
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 5f       	subi	r16, 0xFE	; 254
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	a3 01       	movw	r20, r6
    1782:	0e 94 a5 0c 	call	0x194a	; 0x194a <__ultoa_invert>
    1786:	88 2e       	mov	r8, r24
    1788:	86 18       	sub	r8, r6
    178a:	fb 2d       	mov	r31, r11
    178c:	ff 77       	andi	r31, 0x7F	; 127
    178e:	3f 2e       	mov	r3, r31
    1790:	36 fe       	sbrs	r3, 6
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x2ca>
    1794:	23 2d       	mov	r18, r3
    1796:	2e 7f       	andi	r18, 0xFE	; 254
    1798:	a2 2e       	mov	r10, r18
    179a:	89 14       	cp	r8, r9
    179c:	58 f4       	brcc	.+22     	; 0x17b4 <vfprintf+0x2d0>
    179e:	34 fe       	sbrs	r3, 4
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <vfprintf+0x2d4>
    17a2:	32 fc       	sbrc	r3, 2
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <vfprintf+0x2d4>
    17a6:	83 2d       	mov	r24, r3
    17a8:	8e 7e       	andi	r24, 0xEE	; 238
    17aa:	a8 2e       	mov	r10, r24
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x2d4>
    17ae:	b8 2c       	mov	r11, r8
    17b0:	a3 2c       	mov	r10, r3
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x2d6>
    17b4:	b8 2c       	mov	r11, r8
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x2d6>
    17b8:	b9 2c       	mov	r11, r9
    17ba:	a4 fe       	sbrs	r10, 4
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <vfprintf+0x2f8>
    17be:	fe 01       	movw	r30, r28
    17c0:	e8 0d       	add	r30, r8
    17c2:	f1 1d       	adc	r31, r1
    17c4:	80 81       	ld	r24, Z
    17c6:	80 33       	cpi	r24, 0x30	; 48
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <vfprintf+0x2ee>
    17ca:	9a 2d       	mov	r25, r10
    17cc:	99 7e       	andi	r25, 0xE9	; 233
    17ce:	a9 2e       	mov	r10, r25
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <vfprintf+0x300>
    17d2:	a2 fe       	sbrs	r10, 2
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <vfprintf+0x2fe>
    17d6:	b3 94       	inc	r11
    17d8:	b3 94       	inc	r11
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <vfprintf+0x300>
    17dc:	8a 2d       	mov	r24, r10
    17de:	86 78       	andi	r24, 0x86	; 134
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <vfprintf+0x300>
    17e2:	b3 94       	inc	r11
    17e4:	a3 fc       	sbrc	r10, 3
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <vfprintf+0x326>
    17e8:	a0 fe       	sbrs	r10, 0
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <vfprintf+0x314>
    17ec:	b2 14       	cp	r11, r2
    17ee:	88 f4       	brcc	.+34     	; 0x1812 <vfprintf+0x32e>
    17f0:	28 0c       	add	r2, r8
    17f2:	92 2c       	mov	r9, r2
    17f4:	9b 18       	sub	r9, r11
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <vfprintf+0x330>
    17f8:	b2 14       	cp	r11, r2
    17fa:	60 f4       	brcc	.+24     	; 0x1814 <vfprintf+0x330>
    17fc:	b6 01       	movw	r22, r12
    17fe:	80 e2       	ldi	r24, 0x20	; 32
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1806:	b3 94       	inc	r11
    1808:	f7 cf       	rjmp	.-18     	; 0x17f8 <vfprintf+0x314>
    180a:	b2 14       	cp	r11, r2
    180c:	18 f4       	brcc	.+6      	; 0x1814 <vfprintf+0x330>
    180e:	2b 18       	sub	r2, r11
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0x332>
    1812:	98 2c       	mov	r9, r8
    1814:	21 2c       	mov	r2, r1
    1816:	a4 fe       	sbrs	r10, 4
    1818:	10 c0       	rjmp	.+32     	; 0x183a <vfprintf+0x356>
    181a:	b6 01       	movw	r22, r12
    181c:	80 e3       	ldi	r24, 0x30	; 48
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1824:	a2 fe       	sbrs	r10, 2
    1826:	17 c0       	rjmp	.+46     	; 0x1856 <vfprintf+0x372>
    1828:	a1 fc       	sbrc	r10, 1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <vfprintf+0x34e>
    182c:	88 e7       	ldi	r24, 0x78	; 120
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <vfprintf+0x352>
    1832:	88 e5       	ldi	r24, 0x58	; 88
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	b6 01       	movw	r22, r12
    1838:	0c c0       	rjmp	.+24     	; 0x1852 <vfprintf+0x36e>
    183a:	8a 2d       	mov	r24, r10
    183c:	86 78       	andi	r24, 0x86	; 134
    183e:	59 f0       	breq	.+22     	; 0x1856 <vfprintf+0x372>
    1840:	a1 fe       	sbrs	r10, 1
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x364>
    1844:	8b e2       	ldi	r24, 0x2B	; 43
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x366>
    1848:	80 e2       	ldi	r24, 0x20	; 32
    184a:	a7 fc       	sbrc	r10, 7
    184c:	8d e2       	ldi	r24, 0x2D	; 45
    184e:	b6 01       	movw	r22, r12
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1856:	89 14       	cp	r8, r9
    1858:	38 f4       	brcc	.+14     	; 0x1868 <vfprintf+0x384>
    185a:	b6 01       	movw	r22, r12
    185c:	80 e3       	ldi	r24, 0x30	; 48
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    1864:	9a 94       	dec	r9
    1866:	f7 cf       	rjmp	.-18     	; 0x1856 <vfprintf+0x372>
    1868:	8a 94       	dec	r8
    186a:	f3 01       	movw	r30, r6
    186c:	e8 0d       	add	r30, r8
    186e:	f1 1d       	adc	r31, r1
    1870:	80 81       	ld	r24, Z
    1872:	b6 01       	movw	r22, r12
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    187a:	81 10       	cpse	r8, r1
    187c:	f5 cf       	rjmp	.-22     	; 0x1868 <vfprintf+0x384>
    187e:	22 20       	and	r2, r2
    1880:	09 f4       	brne	.+2      	; 0x1884 <vfprintf+0x3a0>
    1882:	42 ce       	rjmp	.-892    	; 0x1508 <vfprintf+0x24>
    1884:	b6 01       	movw	r22, r12
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <fputc>
    188e:	2a 94       	dec	r2
    1890:	f6 cf       	rjmp	.-20     	; 0x187e <vfprintf+0x39a>
    1892:	f6 01       	movw	r30, r12
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	97 81       	ldd	r25, Z+7	; 0x07
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x3ba>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	2b 96       	adiw	r28, 0x0b	; 11
    18a0:	e2 e1       	ldi	r30, 0x12	; 18
    18a2:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__epilogue_restores__>

000018a6 <strnlen_P>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	05 90       	lpm	r0, Z+
    18aa:	61 50       	subi	r22, 0x01	; 1
    18ac:	70 40       	sbci	r23, 0x00	; 0
    18ae:	01 10       	cpse	r0, r1
    18b0:	d8 f7       	brcc	.-10     	; 0x18a8 <strnlen_P+0x2>
    18b2:	80 95       	com	r24
    18b4:	90 95       	com	r25
    18b6:	8e 0f       	add	r24, r30
    18b8:	9f 1f       	adc	r25, r31
    18ba:	08 95       	ret

000018bc <strnlen>:
    18bc:	fc 01       	movw	r30, r24
    18be:	61 50       	subi	r22, 0x01	; 1
    18c0:	70 40       	sbci	r23, 0x00	; 0
    18c2:	01 90       	ld	r0, Z+
    18c4:	01 10       	cpse	r0, r1
    18c6:	d8 f7       	brcc	.-10     	; 0x18be <strnlen+0x2>
    18c8:	80 95       	com	r24
    18ca:	90 95       	com	r25
    18cc:	8e 0f       	add	r24, r30
    18ce:	9f 1f       	adc	r25, r31
    18d0:	08 95       	ret

000018d2 <fputc>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	fb 01       	movw	r30, r22
    18dc:	23 81       	ldd	r18, Z+3	; 0x03
    18de:	21 fd       	sbrc	r18, 1
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <fputc+0x16>
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	9f ef       	ldi	r25, 0xFF	; 255
    18e6:	2c c0       	rjmp	.+88     	; 0x1940 <fputc+0x6e>
    18e8:	22 ff       	sbrs	r18, 2
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <fputc+0x46>
    18ec:	46 81       	ldd	r20, Z+6	; 0x06
    18ee:	57 81       	ldd	r21, Z+7	; 0x07
    18f0:	24 81       	ldd	r18, Z+4	; 0x04
    18f2:	35 81       	ldd	r19, Z+5	; 0x05
    18f4:	42 17       	cp	r20, r18
    18f6:	53 07       	cpc	r21, r19
    18f8:	44 f4       	brge	.+16     	; 0x190a <fputc+0x38>
    18fa:	a0 81       	ld	r26, Z
    18fc:	b1 81       	ldd	r27, Z+1	; 0x01
    18fe:	9d 01       	movw	r18, r26
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	31 83       	std	Z+1, r19	; 0x01
    1906:	20 83       	st	Z, r18
    1908:	8c 93       	st	X, r24
    190a:	26 81       	ldd	r18, Z+6	; 0x06
    190c:	37 81       	ldd	r19, Z+7	; 0x07
    190e:	2f 5f       	subi	r18, 0xFF	; 255
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	37 83       	std	Z+7, r19	; 0x07
    1914:	26 83       	std	Z+6, r18	; 0x06
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <fputc+0x6e>
    1918:	8b 01       	movw	r16, r22
    191a:	ec 01       	movw	r28, r24
    191c:	fb 01       	movw	r30, r22
    191e:	00 84       	ldd	r0, Z+8	; 0x08
    1920:	f1 85       	ldd	r31, Z+9	; 0x09
    1922:	e0 2d       	mov	r30, r0
    1924:	09 95       	icall
    1926:	89 2b       	or	r24, r25
    1928:	e1 f6       	brne	.-72     	; 0x18e2 <fputc+0x10>
    192a:	d8 01       	movw	r26, r16
    192c:	16 96       	adiw	r26, 0x06	; 6
    192e:	8d 91       	ld	r24, X+
    1930:	9c 91       	ld	r25, X
    1932:	17 97       	sbiw	r26, 0x07	; 7
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	17 96       	adiw	r26, 0x07	; 7
    1938:	9c 93       	st	X, r25
    193a:	8e 93       	st	-X, r24
    193c:	16 97       	sbiw	r26, 0x06	; 6
    193e:	ce 01       	movw	r24, r28
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <__ultoa_invert>:
    194a:	fa 01       	movw	r30, r20
    194c:	aa 27       	eor	r26, r26
    194e:	28 30       	cpi	r18, 0x08	; 8
    1950:	51 f1       	breq	.+84     	; 0x19a6 <__ultoa_invert+0x5c>
    1952:	20 31       	cpi	r18, 0x10	; 16
    1954:	81 f1       	breq	.+96     	; 0x19b6 <__ultoa_invert+0x6c>
    1956:	e8 94       	clt
    1958:	6f 93       	push	r22
    195a:	6e 7f       	andi	r22, 0xFE	; 254
    195c:	6e 5f       	subi	r22, 0xFE	; 254
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	af 4f       	sbci	r26, 0xFF	; 255
    1966:	b1 e0       	ldi	r27, 0x01	; 1
    1968:	3e d0       	rcall	.+124    	; 0x19e6 <__ultoa_invert+0x9c>
    196a:	b4 e0       	ldi	r27, 0x04	; 4
    196c:	3c d0       	rcall	.+120    	; 0x19e6 <__ultoa_invert+0x9c>
    196e:	67 0f       	add	r22, r23
    1970:	78 1f       	adc	r23, r24
    1972:	89 1f       	adc	r24, r25
    1974:	9a 1f       	adc	r25, r26
    1976:	a1 1d       	adc	r26, r1
    1978:	68 0f       	add	r22, r24
    197a:	79 1f       	adc	r23, r25
    197c:	8a 1f       	adc	r24, r26
    197e:	91 1d       	adc	r25, r1
    1980:	a1 1d       	adc	r26, r1
    1982:	6a 0f       	add	r22, r26
    1984:	71 1d       	adc	r23, r1
    1986:	81 1d       	adc	r24, r1
    1988:	91 1d       	adc	r25, r1
    198a:	a1 1d       	adc	r26, r1
    198c:	20 d0       	rcall	.+64     	; 0x19ce <__ultoa_invert+0x84>
    198e:	09 f4       	brne	.+2      	; 0x1992 <__ultoa_invert+0x48>
    1990:	68 94       	set
    1992:	3f 91       	pop	r19
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	26 9f       	mul	r18, r22
    1998:	11 24       	eor	r1, r1
    199a:	30 19       	sub	r19, r0
    199c:	30 5d       	subi	r19, 0xD0	; 208
    199e:	31 93       	st	Z+, r19
    19a0:	de f6       	brtc	.-74     	; 0x1958 <__ultoa_invert+0xe>
    19a2:	cf 01       	movw	r24, r30
    19a4:	08 95       	ret
    19a6:	46 2f       	mov	r20, r22
    19a8:	47 70       	andi	r20, 0x07	; 7
    19aa:	40 5d       	subi	r20, 0xD0	; 208
    19ac:	41 93       	st	Z+, r20
    19ae:	b3 e0       	ldi	r27, 0x03	; 3
    19b0:	0f d0       	rcall	.+30     	; 0x19d0 <__ultoa_invert+0x86>
    19b2:	c9 f7       	brne	.-14     	; 0x19a6 <__ultoa_invert+0x5c>
    19b4:	f6 cf       	rjmp	.-20     	; 0x19a2 <__ultoa_invert+0x58>
    19b6:	46 2f       	mov	r20, r22
    19b8:	4f 70       	andi	r20, 0x0F	; 15
    19ba:	40 5d       	subi	r20, 0xD0	; 208
    19bc:	4a 33       	cpi	r20, 0x3A	; 58
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <__ultoa_invert+0x7c>
    19c0:	49 5d       	subi	r20, 0xD9	; 217
    19c2:	31 fd       	sbrc	r19, 1
    19c4:	40 52       	subi	r20, 0x20	; 32
    19c6:	41 93       	st	Z+, r20
    19c8:	02 d0       	rcall	.+4      	; 0x19ce <__ultoa_invert+0x84>
    19ca:	a9 f7       	brne	.-22     	; 0x19b6 <__ultoa_invert+0x6c>
    19cc:	ea cf       	rjmp	.-44     	; 0x19a2 <__ultoa_invert+0x58>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	a6 95       	lsr	r26
    19d2:	97 95       	ror	r25
    19d4:	87 95       	ror	r24
    19d6:	77 95       	ror	r23
    19d8:	67 95       	ror	r22
    19da:	ba 95       	dec	r27
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__ultoa_invert+0x86>
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 05       	cpc	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	08 95       	ret
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	0a 2e       	mov	r0, r26
    19ec:	06 94       	lsr	r0
    19ee:	57 95       	ror	r21
    19f0:	47 95       	ror	r20
    19f2:	37 95       	ror	r19
    19f4:	27 95       	ror	r18
    19f6:	ba 95       	dec	r27
    19f8:	c9 f7       	brne	.-14     	; 0x19ec <__ultoa_invert+0xa2>
    19fa:	62 0f       	add	r22, r18
    19fc:	73 1f       	adc	r23, r19
    19fe:	84 1f       	adc	r24, r20
    1a00:	95 1f       	adc	r25, r21
    1a02:	a0 1d       	adc	r26, r0
    1a04:	08 95       	ret

00001a06 <__prologue_saves__>:
    1a06:	2f 92       	push	r2
    1a08:	3f 92       	push	r3
    1a0a:	4f 92       	push	r4
    1a0c:	5f 92       	push	r5
    1a0e:	6f 92       	push	r6
    1a10:	7f 92       	push	r7
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	ca 1b       	sub	r28, r26
    1a30:	db 0b       	sbc	r29, r27
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	09 94       	ijmp

00001a3e <__epilogue_restores__>:
    1a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1a40:	39 88       	ldd	r3, Y+17	; 0x11
    1a42:	48 88       	ldd	r4, Y+16	; 0x10
    1a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a50:	b9 84       	ldd	r11, Y+9	; 0x09
    1a52:	c8 84       	ldd	r12, Y+8	; 0x08
    1a54:	df 80       	ldd	r13, Y+7	; 0x07
    1a56:	ee 80       	ldd	r14, Y+6	; 0x06
    1a58:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a60:	b9 81       	ldd	r27, Y+1	; 0x01
    1a62:	ce 0f       	add	r28, r30
    1a64:	d1 1d       	adc	r29, r1
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	ed 01       	movw	r28, r26
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
